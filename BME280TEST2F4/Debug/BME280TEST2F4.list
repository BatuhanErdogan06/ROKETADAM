
BME280TEST2F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800328c  0800328c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003294  08003294  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800329c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000074  08003310  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003310  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1dc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a30  00000000  00000000  0002b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000160cf  00000000  00000000  0002d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c4b1  00000000  00000000  000432c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086e6c  00000000  00000000  0004f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000d65e4  2**0
                  CONTENTS, READONLY
 19 .debug_loc    000069f5  00000000  00000000  000d6637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001428  00000000  00000000  000dd030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000014e4  00000000  00000000  000de458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003238 	.word	0x08003238

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08003238 	.word	0x08003238

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b96e 	b.w	8000d58 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9d08      	ldr	r5, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	468c      	mov	ip, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 8083 	bne.w	8000baa <__udivmoddi4+0x116>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d947      	bls.n	8000b3a <__udivmoddi4+0xa6>
 8000aaa:	fab2 f282 	clz	r2, r2
 8000aae:	b142      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	f1c2 0020 	rsb	r0, r2, #32
 8000ab4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	4097      	lsls	r7, r2
 8000abc:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbbc f6f8 	udiv	r6, ip, r8
 8000acc:	fa1f fe87 	uxth.w	lr, r7
 8000ad0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ad4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad8:	fb06 f10e 	mul.w	r1, r6, lr
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae6:	f080 8119 	bcs.w	8000d1c <__udivmoddi4+0x288>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8116 	bls.w	8000d1c <__udivmoddi4+0x288>
 8000af0:	3e02      	subs	r6, #2
 8000af2:	443b      	add	r3, r7
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000afc:	fb08 3310 	mls	r3, r8, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	45a6      	cmp	lr, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	193c      	adds	r4, r7, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b12:	f080 8105 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000b16:	45a6      	cmp	lr, r4
 8000b18:	f240 8102 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	443c      	add	r4, r7
 8000b20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b24:	eba4 040e 	sub.w	r4, r4, lr
 8000b28:	2600      	movs	r6, #0
 8000b2a:	b11d      	cbz	r5, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c5 4300 	strd	r4, r3, [r5]
 8000b34:	4631      	mov	r1, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	b902      	cbnz	r2, 8000b3e <__udivmoddi4+0xaa>
 8000b3c:	deff      	udf	#255	; 0xff
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d150      	bne.n	8000be8 <__udivmoddi4+0x154>
 8000b46:	1bcb      	subs	r3, r1, r7
 8000b48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	2601      	movs	r6, #1
 8000b52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b56:	0c21      	lsrs	r1, r4, #16
 8000b58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b60:	fb08 f30c 	mul.w	r3, r8, ip
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000b68:	1879      	adds	r1, r7, r1
 8000b6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0xe2>
 8000b70:	428b      	cmp	r3, r1
 8000b72:	f200 80e9 	bhi.w	8000d48 <__udivmoddi4+0x2b4>
 8000b76:	4684      	mov	ip, r0
 8000b78:	1ac9      	subs	r1, r1, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b88:	fb08 f800 	mul.w	r8, r8, r0
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x10c>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x10a>
 8000b98:	45a0      	cmp	r8, r4
 8000b9a:	f200 80d9 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 0408 	sub.w	r4, r4, r8
 8000ba4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba8:	e7bf      	b.n	8000b2a <__udivmoddi4+0x96>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x12e>
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	f000 80b1 	beq.w	8000d16 <__udivmoddi4+0x282>
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bba:	4630      	mov	r0, r6
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	fab3 f683 	clz	r6, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d14a      	bne.n	8000c60 <__udivmoddi4+0x1cc>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d302      	bcc.n	8000bd4 <__udivmoddi4+0x140>
 8000bce:	4282      	cmp	r2, r0
 8000bd0:	f200 80b8 	bhi.w	8000d44 <__udivmoddi4+0x2b0>
 8000bd4:	1a84      	subs	r4, r0, r2
 8000bd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	468c      	mov	ip, r1
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d0a8      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000be2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf0:	4097      	lsls	r7, r2
 8000bf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfa:	40d9      	lsrs	r1, r3
 8000bfc:	4330      	orrs	r0, r6
 8000bfe:	0c03      	lsrs	r3, r0, #16
 8000c00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c10:	fb06 f108 	mul.w	r1, r6, r8
 8000c14:	4299      	cmp	r1, r3
 8000c16:	fa04 f402 	lsl.w	r4, r4, r2
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x19c>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c22:	f080 808d 	bcs.w	8000d40 <__udivmoddi4+0x2ac>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 808a 	bls.w	8000d40 <__udivmoddi4+0x2ac>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b281      	uxth	r1, r0
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb00 f308 	mul.w	r3, r0, r8
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x1c4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c4e:	d273      	bcs.n	8000d38 <__udivmoddi4+0x2a4>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d971      	bls.n	8000d38 <__udivmoddi4+0x2a4>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4439      	add	r1, r7
 8000c58:	1acb      	subs	r3, r1, r3
 8000c5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c5e:	e778      	b.n	8000b52 <__udivmoddi4+0xbe>
 8000c60:	f1c6 0c20 	rsb	ip, r6, #32
 8000c64:	fa03 f406 	lsl.w	r4, r3, r6
 8000c68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c6c:	431c      	orrs	r4, r3
 8000c6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c72:	fa01 f306 	lsl.w	r3, r1, r6
 8000c76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c7e:	431f      	orrs	r7, r3
 8000c80:	0c3b      	lsrs	r3, r7, #16
 8000c82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c86:	fa1f f884 	uxth.w	r8, r4
 8000c8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c92:	fb09 fa08 	mul.w	sl, r9, r8
 8000c96:	458a      	cmp	sl, r1
 8000c98:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x220>
 8000ca2:	1861      	adds	r1, r4, r1
 8000ca4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca8:	d248      	bcs.n	8000d3c <__udivmoddi4+0x2a8>
 8000caa:	458a      	cmp	sl, r1
 8000cac:	d946      	bls.n	8000d3c <__udivmoddi4+0x2a8>
 8000cae:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb2:	4421      	add	r1, r4
 8000cb4:	eba1 010a 	sub.w	r1, r1, sl
 8000cb8:	b2bf      	uxth	r7, r7
 8000cba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cc6:	fb00 f808 	mul.w	r8, r0, r8
 8000cca:	45b8      	cmp	r8, r7
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x24a>
 8000cce:	19e7      	adds	r7, r4, r7
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d22e      	bcs.n	8000d34 <__udivmoddi4+0x2a0>
 8000cd6:	45b8      	cmp	r8, r7
 8000cd8:	d92c      	bls.n	8000d34 <__udivmoddi4+0x2a0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4427      	add	r7, r4
 8000cde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce2:	eba7 0708 	sub.w	r7, r7, r8
 8000ce6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cea:	454f      	cmp	r7, r9
 8000cec:	46c6      	mov	lr, r8
 8000cee:	4649      	mov	r1, r9
 8000cf0:	d31a      	bcc.n	8000d28 <__udivmoddi4+0x294>
 8000cf2:	d017      	beq.n	8000d24 <__udivmoddi4+0x290>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x27a>
 8000cf6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d02:	40f2      	lsrs	r2, r6
 8000d04:	ea4c 0202 	orr.w	r2, ip, r2
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e70b      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e9      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6fd      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d24:	4543      	cmp	r3, r8
 8000d26:	d2e5      	bcs.n	8000cf4 <__udivmoddi4+0x260>
 8000d28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7df      	b.n	8000cf4 <__udivmoddi4+0x260>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e7d2      	b.n	8000cde <__udivmoddi4+0x24a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e78d      	b.n	8000c58 <__udivmoddi4+0x1c4>
 8000d3c:	4681      	mov	r9, r0
 8000d3e:	e7b9      	b.n	8000cb4 <__udivmoddi4+0x220>
 8000d40:	4666      	mov	r6, ip
 8000d42:	e775      	b.n	8000c30 <__udivmoddi4+0x19c>
 8000d44:	4630      	mov	r0, r6
 8000d46:	e74a      	b.n	8000bde <__udivmoddi4+0x14a>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	4439      	add	r1, r7
 8000d4e:	e713      	b.n	8000b78 <__udivmoddi4+0xe4>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	e724      	b.n	8000ba0 <__udivmoddi4+0x10c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <BME280Init>:
void I2CRegisterWrite(uint8_t dataAddr, uint8_t data){
	HAL_I2C_Mem_Write(&hi2c1, bme280deviceadd, dataAddr, 1, &data, 1, 1000);
}


void BME280Init(uint8_t ctrl_meas, uint8_t config){
 8000d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Mem_Write(&hi2c1, bme280deviceadd, dataAddr, 1, &data, 1, 1000);
 8000d60:	4f10      	ldr	r7, [pc, #64]	; (8000da4 <BME280Init+0x48>)
void BME280Init(uint8_t ctrl_meas, uint8_t config){
 8000d62:	b086      	sub	sp, #24
	HAL_I2C_Mem_Write(&hi2c1, bme280deviceadd, dataAddr, 1, &data, 1, 1000);
 8000d64:	2401      	movs	r4, #1
 8000d66:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8000d6a:	f10d 0617 	add.w	r6, sp, #23
void BME280Init(uint8_t ctrl_meas, uint8_t config){
 8000d6e:	4684      	mov	ip, r0
 8000d70:	460d      	mov	r5, r1
	HAL_I2C_Mem_Write(&hi2c1, bme280deviceadd, dataAddr, 1, &data, 1, 1000);
 8000d72:	4623      	mov	r3, r4
 8000d74:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8000d78:	4638      	mov	r0, r7
 8000d7a:	9600      	str	r6, [sp, #0]
 8000d7c:	22f4      	movs	r2, #244	; 0xf4
 8000d7e:	21ee      	movs	r1, #238	; 0xee
 8000d80:	f88d c017 	strb.w	ip, [sp, #23]
 8000d84:	f001 f8a8 	bl	8001ed8 <HAL_I2C_Mem_Write>
 8000d88:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8000d8c:	9600      	str	r6, [sp, #0]
 8000d8e:	4623      	mov	r3, r4
 8000d90:	4638      	mov	r0, r7
 8000d92:	22f5      	movs	r2, #245	; 0xf5
 8000d94:	21ee      	movs	r1, #238	; 0xee
 8000d96:	f88d 5017 	strb.w	r5, [sp, #23]
 8000d9a:	f001 f89d 	bl	8001ed8 <HAL_I2C_Mem_Write>

	I2CRegisterWrite(CTRL_MEAS, ctrl_meas);
	I2CRegisterWrite(CONFIG, config);
	//calibrationOfBME280();

}
 8000d9e:	b006      	add	sp, #24
 8000da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000da4:	200000d0 	.word	0x200000d0

08000da8 <calibrationOfBME280>:
//calibration
void calibrationOfBME280(void){
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b08d      	sub	sp, #52	; 0x34
	uint8_t theCalibData[32] = {0};
	HAL_I2C_Mem_Read(
 8000dac:	ab04      	add	r3, sp, #16
 8000dae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db2:	2218      	movs	r2, #24
	uint8_t theCalibData[32] = {0};
 8000db4:	2400      	movs	r4, #0
	HAL_I2C_Mem_Read(
 8000db6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	22a1      	movs	r2, #161	; 0xa1
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	21ee      	movs	r1, #238	; 0xee
 8000dc2:	4847      	ldr	r0, [pc, #284]	; (8000ee0 <calibrationOfBME280+0x138>)
	uint8_t theCalibData[32] = {0};
 8000dc4:	9406      	str	r4, [sp, #24]
 8000dc6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000dca:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000dce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000dd2:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_I2C_Mem_Read(
 8000dd4:	f001 f974 	bl	80020c0 <HAL_I2C_Mem_Read>
			1,
			theCalibData,
			CALIB_DATA_P_SIZE,
			1000
			);
	    dig_T1 = ((theCalibData[1]  << 8) | (theCalibData[0]));
 8000dd8:	f89d 6011 	ldrb.w	r6, [sp, #17]
 8000ddc:	f89d 4010 	ldrb.w	r4, [sp, #16]
		dig_T2 = ((theCalibData[3]  << 8) | (theCalibData[2]));
 8000de0:	f89d 7013 	ldrb.w	r7, [sp, #19]
		dig_T3 = ((theCalibData[5]  << 8) | (theCalibData[4]));
 8000de4:	f89d 5015 	ldrb.w	r5, [sp, #21]
		dig_P1 = ((theCalibData[7]  << 8) | (theCalibData[6]));
 8000de8:	f89d 2017 	ldrb.w	r2, [sp, #23]
		dig_T2 = ((theCalibData[3]  << 8) | (theCalibData[2]));
 8000dec:	f89d 0012 	ldrb.w	r0, [sp, #18]
		dig_T3 = ((theCalibData[5]  << 8) | (theCalibData[4]));
 8000df0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dig_P1 = ((theCalibData[7]  << 8) | (theCalibData[6]));
 8000df4:	f89d 1016 	ldrb.w	r1, [sp, #22]
	    dig_T1 = ((theCalibData[1]  << 8) | (theCalibData[0]));
 8000df8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8000dfc:	4e39      	ldr	r6, [pc, #228]	; (8000ee4 <calibrationOfBME280+0x13c>)
 8000dfe:	8034      	strh	r4, [r6, #0]
		dig_T2 = ((theCalibData[3]  << 8) | (theCalibData[2]));
 8000e00:	4c39      	ldr	r4, [pc, #228]	; (8000ee8 <calibrationOfBME280+0x140>)
		dig_P2 = ((theCalibData[9]  << 8) | (theCalibData[8]));
		dig_P3 = ((theCalibData[11] << 8) | (theCalibData[10]));
		dig_P4 = ((theCalibData[13] << 8) | (theCalibData[12]));
 8000e02:	f89d 601d 	ldrb.w	r6, [sp, #29]
		dig_T2 = ((theCalibData[3]  << 8) | (theCalibData[2]));
 8000e06:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		dig_T3 = ((theCalibData[5]  << 8) | (theCalibData[4]));
 8000e0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		dig_P1 = ((theCalibData[7]  << 8) | (theCalibData[6]));
 8000e0e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		dig_P2 = ((theCalibData[9]  << 8) | (theCalibData[8]));
 8000e12:	f89d 5019 	ldrb.w	r5, [sp, #25]
 8000e16:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dig_T2 = ((theCalibData[3]  << 8) | (theCalibData[2]));
 8000e1a:	8020      	strh	r0, [r4, #0]
		dig_T3 = ((theCalibData[5]  << 8) | (theCalibData[4]));
 8000e1c:	4833      	ldr	r0, [pc, #204]	; (8000eec <calibrationOfBME280+0x144>)
		dig_P3 = ((theCalibData[11] << 8) | (theCalibData[10]));
 8000e1e:	f89d 701b 	ldrb.w	r7, [sp, #27]
		dig_T3 = ((theCalibData[5]  << 8) | (theCalibData[4]));
 8000e22:	8003      	strh	r3, [r0, #0]
		dig_P2 = ((theCalibData[9]  << 8) | (theCalibData[8]));
 8000e24:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000e28:	4d31      	ldr	r5, [pc, #196]	; (8000ef0 <calibrationOfBME280+0x148>)
		dig_P3 = ((theCalibData[11] << 8) | (theCalibData[10]));
 8000e2a:	f89d 401a 	ldrb.w	r4, [sp, #26]
		dig_P1 = ((theCalibData[7]  << 8) | (theCalibData[6]));
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <calibrationOfBME280+0x14c>)
		dig_P2 = ((theCalibData[9]  << 8) | (theCalibData[8]));
 8000e30:	802a      	strh	r2, [r5, #0]
		dig_P3 = ((theCalibData[11] << 8) | (theCalibData[10]));
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <calibrationOfBME280+0x150>)
		dig_P1 = ((theCalibData[7]  << 8) | (theCalibData[6]));
 8000e34:	8019      	strh	r1, [r3, #0]
		dig_P3 = ((theCalibData[11] << 8) | (theCalibData[10]));
 8000e36:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
		dig_P4 = ((theCalibData[13] << 8) | (theCalibData[12]));
 8000e3a:	f89d 301c 	ldrb.w	r3, [sp, #28]
		dig_P5 = ((theCalibData[15] << 8) | (theCalibData[14]));
 8000e3e:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8000e42:	f89d 001e 	ldrb.w	r0, [sp, #30]
		dig_P3 = ((theCalibData[11] << 8) | (theCalibData[10]));
 8000e46:	8014      	strh	r4, [r2, #0]
		dig_P4 = ((theCalibData[13] << 8) | (theCalibData[12]));
 8000e48:	4c2c      	ldr	r4, [pc, #176]	; (8000efc <calibrationOfBME280+0x154>)
		dig_P6 = ((theCalibData[17] << 8) | (theCalibData[16]));
 8000e4a:	f89d 7021 	ldrb.w	r7, [sp, #33]	; 0x21
 8000e4e:	4d2c      	ldr	r5, [pc, #176]	; (8000f00 <calibrationOfBME280+0x158>)
		dig_P7 = ((theCalibData[19] << 8) | (theCalibData[18]));
 8000e50:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
		dig_P4 = ((theCalibData[13] << 8) | (theCalibData[12]));
 8000e54:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
		dig_P5 = ((theCalibData[15] << 8) | (theCalibData[14]));
 8000e58:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
		dig_P4 = ((theCalibData[13] << 8) | (theCalibData[12]));
 8000e5c:	8023      	strh	r3, [r4, #0]
		dig_P6 = ((theCalibData[17] << 8) | (theCalibData[16]));
 8000e5e:	f89d 1020 	ldrb.w	r1, [sp, #32]
		dig_P5 = ((theCalibData[15] << 8) | (theCalibData[14]));
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <calibrationOfBME280+0x15c>)
		dig_P7 = ((theCalibData[19] << 8) | (theCalibData[18]));
 8000e64:	f89d 6023 	ldrb.w	r6, [sp, #35]	; 0x23
		dig_P8 = ((theCalibData[21] << 8) | (theCalibData[20]));
 8000e68:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
		dig_P5 = ((theCalibData[15] << 8) | (theCalibData[14]));
 8000e6c:	8018      	strh	r0, [r3, #0]
		dig_P6 = ((theCalibData[17] << 8) | (theCalibData[16]));
 8000e6e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		dig_P8 = ((theCalibData[21] << 8) | (theCalibData[20]));
 8000e72:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
		dig_P6 = ((theCalibData[17] << 8) | (theCalibData[16]));
 8000e76:	8029      	strh	r1, [r5, #0]
		dig_P7 = ((theCalibData[19] << 8) | (theCalibData[18]));
 8000e78:	4823      	ldr	r0, [pc, #140]	; (8000f08 <calibrationOfBME280+0x160>)
		dig_P8 = ((theCalibData[21] << 8) | (theCalibData[20]));
 8000e7a:	4924      	ldr	r1, [pc, #144]	; (8000f0c <calibrationOfBME280+0x164>)
		dig_P7 = ((theCalibData[19] << 8) | (theCalibData[18]));
 8000e7c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
		dig_P8 = ((theCalibData[21] << 8) | (theCalibData[20]));
 8000e80:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
		dig_P7 = ((theCalibData[19] << 8) | (theCalibData[18]));
 8000e84:	8002      	strh	r2, [r0, #0]
		dig_P9 = ((theCalibData[23] << 8) | (theCalibData[22]));
		dig_H1 = ( theCalibData[23]);
 8000e86:	4c22      	ldr	r4, [pc, #136]	; (8000f10 <calibrationOfBME280+0x168>)
		dig_P8 = ((theCalibData[21] << 8) | (theCalibData[20]));
 8000e88:	800b      	strh	r3, [r1, #0]
		dig_P9 = ((theCalibData[23] << 8) | (theCalibData[22]));
 8000e8a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8000e8e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
		dig_H1 = ( theCalibData[23]);
 8000e92:	7023      	strb	r3, [r4, #0]
		dig_P9 = ((theCalibData[23] << 8) | (theCalibData[22]));
 8000e94:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <calibrationOfBME280+0x16c>)
		dig_H2 = ((theCalibData[24] << 8) | (theCalibData[25]));
		dig_H3 = ( theCalibData[26]);
		dig_H4 = ((theCalibData[27] << 8) | (theCalibData[28]));
 8000e9a:	f89d 502b 	ldrb.w	r5, [sp, #43]	; 0x2b
		dig_H2 = ((theCalibData[24] << 8) | (theCalibData[25]));
 8000e9e:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8000ea2:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
		dig_H4 = ((theCalibData[27] << 8) | (theCalibData[28]));
 8000ea6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
		dig_P9 = ((theCalibData[23] << 8) | (theCalibData[22]));
 8000eaa:	8018      	strh	r0, [r3, #0]
		dig_H2 = ((theCalibData[24] << 8) | (theCalibData[25]));
 8000eac:	481a      	ldr	r0, [pc, #104]	; (8000f18 <calibrationOfBME280+0x170>)
		dig_H5 = ((theCalibData[29] << 8) | (theCalibData[30]));
 8000eae:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8000eb2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
		dig_H2 = ((theCalibData[24] << 8) | (theCalibData[25]));
 8000eb6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
		dig_H4 = ((theCalibData[27] << 8) | (theCalibData[28]));
 8000eba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000ebe:	4d17      	ldr	r5, [pc, #92]	; (8000f1c <calibrationOfBME280+0x174>)
		dig_H2 = ((theCalibData[24] << 8) | (theCalibData[25]));
 8000ec0:	8001      	strh	r1, [r0, #0]
		dig_H3 = ( theCalibData[26]);
 8000ec2:	4917      	ldr	r1, [pc, #92]	; (8000f20 <calibrationOfBME280+0x178>)
		dig_H4 = ((theCalibData[27] << 8) | (theCalibData[28]));
 8000ec4:	802a      	strh	r2, [r5, #0]
		dig_H3 = ( theCalibData[26]);
 8000ec6:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
		dig_H5 = ((theCalibData[29] << 8) | (theCalibData[30]));
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <calibrationOfBME280+0x17c>)
		dig_H6= ( theCalibData[31]);
 8000ecc:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <calibrationOfBME280+0x180>)
		dig_H3 = ( theCalibData[26]);
 8000ece:	700d      	strb	r5, [r1, #0]
		dig_H6= ( theCalibData[31]);
 8000ed0:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
 8000ed4:	7011      	strb	r1, [r2, #0]
		dig_H5 = ((theCalibData[29] << 8) | (theCalibData[30]));
 8000ed6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000eda:	8003      	strh	r3, [r0, #0]



}
 8000edc:	b00d      	add	sp, #52	; 0x34
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee0:	200000d0 	.word	0x200000d0
 8000ee4:	20000092 	.word	0x20000092
 8000ee8:	20000096 	.word	0x20000096
 8000eec:	200000c8 	.word	0x200000c8
 8000ef0:	200000a8 	.word	0x200000a8
 8000ef4:	200000b8 	.word	0x200000b8
 8000ef8:	200000ba 	.word	0x200000ba
 8000efc:	200000aa 	.word	0x200000aa
 8000f00:	200000ca 	.word	0x200000ca
 8000f04:	200000b2 	.word	0x200000b2
 8000f08:	20000090 	.word	0x20000090
 8000f0c:	200000bc 	.word	0x200000bc
 8000f10:	20000098 	.word	0x20000098
 8000f14:	200000c6 	.word	0x200000c6
 8000f18:	200000cc 	.word	0x200000cc
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	200000c4 	.word	0x200000c4
 8000f24:	200000be 	.word	0x200000be
 8000f28:	200000b0 	.word	0x200000b0
 8000f2c:	00000000 	.word	0x00000000

08000f30 <BME280Calculation>:

void BME280Calculation(void){
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_I2C_Mem_Read(&hi2c1, bme280deviceadd, dataAddr, 1, &rxBuff, 1, 1000);
 8000f34:	4fde      	ldr	r7, [pc, #888]	; (80012b0 <BME280Calculation+0x380>)
void BME280Calculation(void){
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	ac0b      	add	r4, sp, #44	; 0x2c
	HAL_I2C_Mem_Read(&hi2c1, bme280deviceadd, dataAddr, 1, &rxBuff, 1, 1000);
 8000f3a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000f3e:	2601      	movs	r6, #1
 8000f40:	2301      	movs	r3, #1
 8000f42:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8000f46:	9400      	str	r4, [sp, #0]
 8000f48:	22f3      	movs	r2, #243	; 0xf3
 8000f4a:	21ee      	movs	r1, #238	; 0xee
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	f001 f8b7 	bl	80020c0 <HAL_I2C_Mem_Read>
	return rxBuff;
 8000f52:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	do{
		status=I2CRegisterRead(STATUS);
	} while(
			((status & 0x08) == STATUS_CONV)||
			((status & 0x01) == STATUS_COPY)
			);
 8000f56:	f013 0f09 	tst.w	r3, #9
 8000f5a:	d1f1      	bne.n	8000f40 <BME280Calculation+0x10>

	HAL_I2C_Mem_Read(
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	e9cd 4300 	strd	r4, r3, [sp]
 8000f62:	9502      	str	r5, [sp, #8]
 8000f64:	2301      	movs	r3, #1
 8000f66:	22f7      	movs	r2, #247	; 0xf7
 8000f68:	21ee      	movs	r1, #238	; 0xee
 8000f6a:	48d1      	ldr	r0, [pc, #836]	; (80012b0 <BME280Calculation+0x380>)
			rawData,
			RAW_DATA_LENGTH,
			1000
			);

		temperature_raw =  ((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8000f6c:	4cd1      	ldr	r4, [pc, #836]	; (80012b4 <BME280Calculation+0x384>)
	HAL_I2C_Mem_Read(
 8000f6e:	f001 f8a7 	bl	80020c0 <HAL_I2C_Mem_Read>
		temperature_raw =  ((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8000f72:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000f76:	f89d a02d 	ldrb.w	sl, [sp, #45]	; 0x2d
		humadity_raw    =  ((rawData[6] << 12) | (rawData[7] << 4) | (rawData[8] >> 4));
 8000f7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000f7e:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
		humadity_raw    =  ((rawData[6] << 12) | (rawData[7] << 4) | (rawData[8] >> 4));
 8000f82:	f89d c032 	ldrb.w	ip, [sp, #50]	; 0x32
		temperature_raw =  ((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8000f86:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
 8000f8a:	f89d 7031 	ldrb.w	r7, [sp, #49]	; 0x31
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000f8e:	f89d 602e 	ldrb.w	r6, [sp, #46]	; 0x2e
		humadity_raw    =  ((rawData[6] << 12) | (rawData[7] << 4) | (rawData[8] >> 4));
 8000f92:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8000f96:	4ac8      	ldr	r2, [pc, #800]	; (80012b8 <BME280Calculation+0x388>)
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000f98:	49c8      	ldr	r1, [pc, #800]	; (80012bc <BME280Calculation+0x38c>)
		temperature_raw =  ((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8000f9a:	0100      	lsls	r0, r0, #4
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000f9c:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
		humadity_raw    =  ((rawData[6] << 12) | (rawData[7] << 4) | (rawData[8] >> 4));
 8000fa0:	011b      	lsls	r3, r3, #4
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000fa2:	ea4a 3a0e 	orr.w	sl, sl, lr, lsl #12
		humadity_raw    =  ((rawData[6] << 12) | (rawData[7] << 4) | (rawData[8] >> 4));
 8000fa6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
		temperature_raw =  ((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8000faa:	ea40 3008 	orr.w	r0, r0, r8, lsl #12
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000fae:	ea4a 1a16 	orr.w	sl, sl, r6, lsr #4
		humadity_raw    =  ((rawData[6] << 12) | (rawData[7] << 4) | (rawData[8] >> 4));
 8000fb2:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
		temperature_raw =  ((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8000fb6:	ea40 1017 	orr.w	r0, r0, r7, lsr #4
		humadity_raw    =  ((rawData[6] << 12) | (rawData[7] << 4) | (rawData[8] >> 4));
 8000fba:	6013      	str	r3, [r2, #0]
		temperature_raw =  ((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8000fbc:	6020      	str	r0, [r4, #0]
		pressure_raw    =  ((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8000fbe:	f8c1 a000 	str.w	sl, [r1]



		    double var1, var2;
			var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8000fc2:	f7ff fa5b 	bl	800047c <__aeabi_i2d>
 8000fc6:	4bbe      	ldr	r3, [pc, #760]	; (80012c0 <BME280Calculation+0x390>)
 8000fc8:	4606      	mov	r6, r0
 8000fca:	8818      	ldrh	r0, [r3, #0]
 8000fcc:	460f      	mov	r7, r1
 8000fce:	f7ff fa45 	bl	800045c <__aeabi_ui2d>
			var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8000fd2:	4bbc      	ldr	r3, [pc, #752]	; (80012c4 <BME280Calculation+0x394>)
			var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	460d      	mov	r5, r1
			var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4630      	mov	r0, r6
 8000fdc:	4639      	mov	r1, r7
 8000fde:	f7ff fab7 	bl	8000550 <__aeabi_dmul>
 8000fe2:	4bb9      	ldr	r3, [pc, #740]	; (80012c8 <BME280Calculation+0x398>)
 8000fe4:	4680      	mov	r8, r0
 8000fe6:	4689      	mov	r9, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff faaf 	bl	8000550 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	f7ff f8f1 	bl	80001e0 <__aeabi_dsub>
			var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8000ffe:	4bb3      	ldr	r3, [pc, #716]	; (80012cc <BME280Calculation+0x39c>)
			var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8001000:	4680      	mov	r8, r0
 8001002:	4689      	mov	r9, r1
			var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8001004:	2200      	movs	r2, #0
 8001006:	4630      	mov	r0, r6
 8001008:	4639      	mov	r1, r7
 800100a:	f7ff faa1 	bl	8000550 <__aeabi_dmul>
			var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 800100e:	4646      	mov	r6, r8
 8001010:	464f      	mov	r7, r9
			var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8001012:	4680      	mov	r8, r0
 8001014:	4689      	mov	r9, r1
 8001016:	4bae      	ldr	r3, [pc, #696]	; (80012d0 <BME280Calculation+0x3a0>)
 8001018:	2200      	movs	r2, #0
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff fa97 	bl	8000550 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4640      	mov	r0, r8
 8001028:	4649      	mov	r1, r9
 800102a:	f7ff f8d9 	bl	80001e0 <__aeabi_dsub>
 800102e:	4ba9      	ldr	r3, [pc, #676]	; (80012d4 <BME280Calculation+0x3a4>)
 8001030:	4604      	mov	r4, r0
 8001032:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001036:	460d      	mov	r5, r1
 8001038:	f7ff fa20 	bl	800047c <__aeabi_i2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4620      	mov	r0, r4
 8001042:	4629      	mov	r1, r5
 8001044:	f7ff fa84 	bl	8000550 <__aeabi_dmul>
			var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8001048:	4ba3      	ldr	r3, [pc, #652]	; (80012d8 <BME280Calculation+0x3a8>)
			var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 800104a:	4604      	mov	r4, r0
			var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 800104c:	f9b3 0000 	ldrsh.w	r0, [r3]
			var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8001050:	460d      	mov	r5, r1
			var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8001052:	f7ff fa13 	bl	800047c <__aeabi_i2d>
 8001056:	4632      	mov	r2, r6
 8001058:	463b      	mov	r3, r7
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fa75 	bl	8000550 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4630      	mov	r0, r6
 800106c:	4639      	mov	r1, r7
 800106e:	f7ff fa6f 	bl	8000550 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
			double t_fine = (int32_t)(var1+var2);
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff f8b3 	bl	80001e4 <__adddf3>
			volatile float T = (var1+var2)/5120.0;
 800107e:	2200      	movs	r2, #0
 8001080:	4b96      	ldr	r3, [pc, #600]	; (80012dc <BME280Calculation+0x3ac>)
			double t_fine = (int32_t)(var1+var2);
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
			volatile float T = (var1+var2)/5120.0;
 8001086:	f7ff fb8d 	bl	80007a4 <__aeabi_ddiv>
 800108a:	f7ff fc9b 	bl	80009c4 <__aeabi_d2f>
			double t_fine = (int32_t)(var1+var2);
 800108e:	4629      	mov	r1, r5
			volatile float T = (var1+var2)/5120.0;
 8001090:	4603      	mov	r3, r0
			double t_fine = (int32_t)(var1+var2);
 8001092:	4620      	mov	r0, r4
			volatile float T = (var1+var2)/5120.0;
 8001094:	9307      	str	r3, [sp, #28]
			double t_fine = (int32_t)(var1+var2);
 8001096:	f7ff fc6d 	bl	8000974 <__aeabi_d2iz>
 800109a:	f7ff f9ef 	bl	800047c <__aeabi_i2d>

			var1=((double)t_fine/2.0)-64000.0;
 800109e:	4b90      	ldr	r3, [pc, #576]	; (80012e0 <BME280Calculation+0x3b0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f7ff fa55 	bl	8000550 <__aeabi_dmul>
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b8e      	ldr	r3, [pc, #568]	; (80012e4 <BME280Calculation+0x3b4>)
 80010aa:	f7ff f899 	bl	80001e0 <__aeabi_dsub>
			var2=var1*var1*((double)dig_P6)/32768.0;
 80010ae:	4b8e      	ldr	r3, [pc, #568]	; (80012e8 <BME280Calculation+0x3b8>)
			var1=((double)t_fine/2.0)-64000.0;
 80010b0:	4604      	mov	r4, r0
			var2=var1*var1*((double)dig_P6)/32768.0;
 80010b2:	f9b3 0000 	ldrsh.w	r0, [r3]
			var1=((double)t_fine/2.0)-64000.0;
 80010b6:	460d      	mov	r5, r1
			var2=var1*var1*((double)dig_P6)/32768.0;
 80010b8:	f7ff f9e0 	bl	800047c <__aeabi_i2d>
 80010bc:	4622      	mov	r2, r4
 80010be:	462b      	mov	r3, r5
 80010c0:	4606      	mov	r6, r0
 80010c2:	460f      	mov	r7, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff fa42 	bl	8000550 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4630      	mov	r0, r6
 80010d2:	4639      	mov	r1, r7
 80010d4:	f7ff fa3c 	bl	8000550 <__aeabi_dmul>
 80010d8:	2200      	movs	r2, #0
 80010da:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80010de:	f7ff fa37 	bl	8000550 <__aeabi_dmul>
			var2=var2+var1*((double)dig_P5)*2.0;
 80010e2:	4b82      	ldr	r3, [pc, #520]	; (80012ec <BME280Calculation+0x3bc>)
			var2=var1*var1*((double)dig_P6)/32768.0;
 80010e4:	4606      	mov	r6, r0
			var2=var2+var1*((double)dig_P5)*2.0;
 80010e6:	f9b3 0000 	ldrsh.w	r0, [r3]
			var2=var1*var1*((double)dig_P6)/32768.0;
 80010ea:	460f      	mov	r7, r1
			var2=var2+var1*((double)dig_P5)*2.0;
 80010ec:	f7ff f9c6 	bl	800047c <__aeabi_i2d>
 80010f0:	4622      	mov	r2, r4
 80010f2:	462b      	mov	r3, r5
 80010f4:	f7ff fa2c 	bl	8000550 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	f7ff f872 	bl	80001e4 <__adddf3>
 8001100:	4632      	mov	r2, r6
 8001102:	463b      	mov	r3, r7
 8001104:	f7ff f86e 	bl	80001e4 <__adddf3>
			var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8001108:	2200      	movs	r2, #0
 800110a:	4b79      	ldr	r3, [pc, #484]	; (80012f0 <BME280Calculation+0x3c0>)
 800110c:	f7ff fa20 	bl	8000550 <__aeabi_dmul>
 8001110:	4b78      	ldr	r3, [pc, #480]	; (80012f4 <BME280Calculation+0x3c4>)
 8001112:	4606      	mov	r6, r0
 8001114:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001118:	460f      	mov	r7, r1
 800111a:	f7ff f9af 	bl	800047c <__aeabi_i2d>
 800111e:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <BME280Calculation+0x3c8>)
 8001120:	2200      	movs	r2, #0
 8001122:	f7ff fa15 	bl	8000550 <__aeabi_dmul>
 8001126:	4632      	mov	r2, r6
 8001128:	463b      	mov	r3, r7
 800112a:	f7ff f85b 	bl	80001e4 <__adddf3>
			var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 800112e:	4b73      	ldr	r3, [pc, #460]	; (80012fc <BME280Calculation+0x3cc>)
			var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8001130:	4606      	mov	r6, r0
			var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8001132:	f9b3 0000 	ldrsh.w	r0, [r3]
			var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8001136:	460f      	mov	r7, r1
			var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8001138:	f7ff f9a0 	bl	800047c <__aeabi_i2d>
 800113c:	4622      	mov	r2, r4
 800113e:	462b      	mov	r3, r5
 8001140:	f7ff fa06 	bl	8000550 <__aeabi_dmul>
 8001144:	4622      	mov	r2, r4
 8001146:	462b      	mov	r3, r5
 8001148:	f7ff fa02 	bl	8000550 <__aeabi_dmul>
 800114c:	2200      	movs	r2, #0
 800114e:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8001152:	f7ff f9fd 	bl	8000550 <__aeabi_dmul>
 8001156:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <BME280Calculation+0x3d0>)
 8001158:	4680      	mov	r8, r0
 800115a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800115e:	4689      	mov	r9, r1
 8001160:	f7ff f98c 	bl	800047c <__aeabi_i2d>
 8001164:	4622      	mov	r2, r4
 8001166:	462b      	mov	r3, r5
 8001168:	f7ff f9f2 	bl	8000550 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4640      	mov	r0, r8
 8001172:	4649      	mov	r1, r9
 8001174:	f7ff f836 	bl	80001e4 <__adddf3>
 8001178:	2200      	movs	r2, #0
 800117a:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 800117e:	f7ff f9e7 	bl	8000550 <__aeabi_dmul>
			var1=(1.0+var1/32768.0)*((double)dig_P1);
 8001182:	2200      	movs	r2, #0
 8001184:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001188:	f7ff f9e2 	bl	8000550 <__aeabi_dmul>
 800118c:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <BME280Calculation+0x3d4>)
 800118e:	4c5e      	ldr	r4, [pc, #376]	; (8001308 <BME280Calculation+0x3d8>)
 8001190:	2200      	movs	r2, #0
 8001192:	f7ff f827 	bl	80001e4 <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	8820      	ldrh	r0, [r4, #0]
 800119c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011a0:	f7ff f95c 	bl	800045c <__aeabi_ui2d>
 80011a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80011a8:	f7ff f9d2 	bl	8000550 <__aeabi_dmul>
 80011ac:	4604      	mov	r4, r0
			volatile double p = 1048576.0-(double)pressure_raw;
 80011ae:	4650      	mov	r0, sl
			var1=(1.0+var1/32768.0)*((double)dig_P1);
 80011b0:	460d      	mov	r5, r1
			volatile double p = 1048576.0-(double)pressure_raw;
 80011b2:	f7ff f963 	bl	800047c <__aeabi_i2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	2000      	movs	r0, #0
 80011bc:	4953      	ldr	r1, [pc, #332]	; (800130c <BME280Calculation+0x3dc>)
 80011be:	f7ff f80f 	bl	80001e0 <__aeabi_dsub>
 80011c2:	4680      	mov	r8, r0
 80011c4:	4689      	mov	r9, r1
 80011c6:	e9cd 8908 	strd	r8, r9, [sp, #32]
			p=(p-(var2/4096.0))*6250.0/var1;
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <BME280Calculation+0x3e0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	4630      	mov	r0, r6
 80011d0:	4639      	mov	r1, r7
 80011d2:	f7ff f9bd 	bl	8000550 <__aeabi_dmul>
 80011d6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4630      	mov	r0, r6
 80011e0:	4639      	mov	r1, r7
 80011e2:	f7fe fffd 	bl	80001e0 <__aeabi_dsub>
 80011e6:	a330      	add	r3, pc, #192	; (adr r3, 80012a8 <BME280Calculation+0x378>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f9b0 	bl	8000550 <__aeabi_dmul>
 80011f0:	4622      	mov	r2, r4
 80011f2:	462b      	mov	r3, r5
 80011f4:	f7ff fad6 	bl	80007a4 <__aeabi_ddiv>
 80011f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
			var1=((double)dig_P9)*p*p/2147483648.0;
 80011fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001200:	4c44      	ldr	r4, [pc, #272]	; (8001314 <BME280Calculation+0x3e4>)
 8001202:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001206:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800120a:	f7ff f937 	bl	800047c <__aeabi_i2d>
 800120e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8001212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001216:	f7ff f99b 	bl	8000550 <__aeabi_dmul>
 800121a:	4622      	mov	r2, r4
 800121c:	462b      	mov	r3, r5
 800121e:	f7ff f997 	bl	8000550 <__aeabi_dmul>
 8001222:	2200      	movs	r2, #0
 8001224:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8001228:	f7ff f992 	bl	8000550 <__aeabi_dmul>
			var2=p*((double)dig_P8)/32768.0;
 800122c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
			var1=((double)dig_P9)*p*p/2147483648.0;
 8001230:	460d      	mov	r5, r1
			var2=p*((double)dig_P8)/32768.0;
 8001232:	4939      	ldr	r1, [pc, #228]	; (8001318 <BME280Calculation+0x3e8>)
			var1=((double)dig_P9)*p*p/2147483648.0;
 8001234:	4604      	mov	r4, r0
			var2=p*((double)dig_P8)/32768.0;
 8001236:	f9b1 0000 	ldrsh.w	r0, [r1]
 800123a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800123e:	f7ff f91d 	bl	800047c <__aeabi_i2d>
 8001242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001246:	f7ff f983 	bl	8000550 <__aeabi_dmul>
 800124a:	2200      	movs	r2, #0
 800124c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001250:	f7ff f97e 	bl	8000550 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
			p=p+(var1+var2+((double)dig_P7))/16.0;
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7fe ffc2 	bl	80001e4 <__adddf3>
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <BME280Calculation+0x3ec>)
 8001262:	4604      	mov	r4, r0
 8001264:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001268:	460d      	mov	r5, r1
 800126a:	f7ff f907 	bl	800047c <__aeabi_i2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7fe ffb5 	bl	80001e4 <__adddf3>
 800127a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <BME280Calculation+0x3f0>)
 8001280:	2200      	movs	r2, #0
 8001282:	f7ff f965 	bl	8000550 <__aeabi_dmul>
 8001286:	4622      	mov	r2, r4
 8001288:	462b      	mov	r3, r5
 800128a:	f7fe ffab 	bl	80001e4 <__adddf3>

			temperature = T;
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <BME280Calculation+0x3f4>)
			p=p+(var1+var2+((double)dig_P7))/16.0;
 8001290:	e9cd 0108 	strd	r0, r1, [sp, #32]
			temperature = T;
 8001294:	9a07      	ldr	r2, [sp, #28]
 8001296:	601a      	str	r2, [r3, #0]
			pressure    = p;
 8001298:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800129c:	f7ff fb92 	bl	80009c4 <__aeabi_d2f>
 80012a0:	e044      	b.n	800132c <BME280Calculation+0x3fc>
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	00000000 	.word	0x00000000
 80012ac:	40b86a00 	.word	0x40b86a00
 80012b0:	200000d0 	.word	0x200000d0
 80012b4:	200000a0 	.word	0x200000a0
 80012b8:	20000124 	.word	0x20000124
 80012bc:	200000a4 	.word	0x200000a4
 80012c0:	20000092 	.word	0x20000092
 80012c4:	3ee00000 	.word	0x3ee00000
 80012c8:	3f200000 	.word	0x3f200000
 80012cc:	3f100000 	.word	0x3f100000
 80012d0:	3f500000 	.word	0x3f500000
 80012d4:	20000096 	.word	0x20000096
 80012d8:	200000c8 	.word	0x200000c8
 80012dc:	40b40000 	.word	0x40b40000
 80012e0:	3fe00000 	.word	0x3fe00000
 80012e4:	40ef4000 	.word	0x40ef4000
 80012e8:	200000ca 	.word	0x200000ca
 80012ec:	200000b2 	.word	0x200000b2
 80012f0:	3fd00000 	.word	0x3fd00000
 80012f4:	200000aa 	.word	0x200000aa
 80012f8:	40f00000 	.word	0x40f00000
 80012fc:	200000ba 	.word	0x200000ba
 8001300:	200000a8 	.word	0x200000a8
 8001304:	3ff00000 	.word	0x3ff00000
 8001308:	200000b8 	.word	0x200000b8
 800130c:	41300000 	.word	0x41300000
 8001310:	3f300000 	.word	0x3f300000
 8001314:	200000c6 	.word	0x200000c6
 8001318:	200000bc 	.word	0x200000bc
 800131c:	20000090 	.word	0x20000090
 8001320:	3fb00000 	.word	0x3fb00000
 8001324:	2000009c 	.word	0x2000009c
 8001328:	47c5e680 	.word	0x47c5e680
			altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));
 800132c:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8001328 <BME280Calculation+0x3f8>
			pressure    = p;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <BME280Calculation+0x430>)
			altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));
 8001332:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001364 <BME280Calculation+0x434>
			pressure    = p;
 8001336:	6018      	str	r0, [r3, #0]
 8001338:	ee07 0a90 	vmov	s15, r0
			altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));
 800133c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001340:	f001 fb36 	bl	80029b0 <powf>
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <BME280Calculation+0x438>)
 8001346:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800134a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800134e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800136c <BME280Calculation+0x43c>
 8001352:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001356:	edc3 7a00 	vstr	s15, [r3]



		}
 800135a:	b00e      	add	sp, #56	; 0x38
 800135c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001360:	200000ac 	.word	0x200000ac
 8001364:	3e42dcae 	.word	0x3e42dcae
 8001368:	200000b4 	.word	0x200000b4
 800136c:	472d2a00 	.word	0x472d2a00

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	2300      	movs	r3, #0
{
 8001374:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800137a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001382:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4921      	ldr	r1, [pc, #132]	; (800140c <SystemClock_Config+0x9c>)
 8001388:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138a:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001394:	6408      	str	r0, [r1, #64]	; 0x40
 8001396:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001398:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b2:	2401      	movs	r4, #1
 80013b4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2202      	movs	r2, #2
 80013ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013be:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80013c6:	240c      	movs	r4, #12
 80013c8:	2560      	movs	r5, #96	; 0x60
 80013ca:	2202      	movs	r2, #2
 80013cc:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 12;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80013d4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d8:	9901      	ldr	r1, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f000 fff5 	bl	80023c8 <HAL_RCC_OscConfig>
 80013de:	b108      	cbz	r0, 80013e4 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	240f      	movs	r4, #15
 80013e8:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013f2:	a802      	add	r0, sp, #8
 80013f4:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80013fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013fe:	f001 f9ff 	bl	8002800 <HAL_RCC_ClockConfig>
 8001402:	b108      	cbz	r0, 8001408 <SystemClock_Config+0x98>
 8001404:	b672      	cpsid	i
  while (1)
 8001406:	e7fe      	b.n	8001406 <SystemClock_Config+0x96>
}
 8001408:	b015      	add	sp, #84	; 0x54
 800140a:	bd30      	pop	{r4, r5, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40007000 	.word	0x40007000

08001414 <main>:
{
 8001414:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	2400      	movs	r4, #0
{
 8001418:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800141a:	f000 f921 	bl	8001660 <HAL_Init>
  SystemClock_Config();
 800141e:	f7ff ffa7 	bl	8001370 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001426:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <main+0xb8>)
 800142c:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001432:	4827      	ldr	r0, [pc, #156]	; (80014d0 <main+0xbc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001434:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
 800143a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	9402      	str	r4, [sp, #8]
 8001446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
 800144e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001450:	f002 0201 	and.w	r2, r2, #1
 8001454:	9202      	str	r2, [sp, #8]
 8001456:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	9403      	str	r4, [sp, #12]
 800145a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145c:	f042 0202 	orr.w	r2, r2, #2
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800146a:	4622      	mov	r2, r4
 800146c:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001470:	f000 fa86 	bl	8001980 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8001474:	2202      	movs	r2, #2
 8001476:	2301      	movs	r3, #1
 8001478:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800147c:	4814      	ldr	r0, [pc, #80]	; (80014d0 <main+0xbc>)
  GPIO_InitStruct.Pin = LED_Pin;
 800147e:	2200      	movs	r2, #0
 8001480:	2300      	movs	r3, #0
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001482:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_Pin;
 8001484:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001488:	f000 f98e 	bl	80017a8 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <main+0xc0>)
 800148e:	4912      	ldr	r1, [pc, #72]	; (80014d8 <main+0xc4>)
  hi2c1.Init.ClockSpeed = 100000;
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <main+0xc8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001492:	6084      	str	r4, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress2 = 0;
 8001498:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149c:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 80014a0:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 80014a4:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a6:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a8:	f000 fc52 	bl	8001d50 <HAL_I2C_Init>
 80014ac:	b108      	cbz	r0, 80014b2 <main+0x9e>
 80014ae:	b672      	cpsid	i
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <main+0x9c>
  BME280Init(f4, f5);
 80014b2:	21c0      	movs	r1, #192	; 0xc0
 80014b4:	20b7      	movs	r0, #183	; 0xb7
 80014b6:	f7ff fc51 	bl	8000d5c <BME280Init>
  calibrationOfBME280();//çalışmazsa initin içine at bu fonkiyonu.
 80014ba:	f7ff fc75 	bl	8000da8 <calibrationOfBME280>
	  BME280Calculation();
 80014be:	f7ff fd37 	bl	8000f30 <BME280Calculation>
	  HAL_Delay(200);
 80014c2:	20c8      	movs	r0, #200	; 0xc8
 80014c4:	f000 f8f8 	bl	80016b8 <HAL_Delay>
  while (1)
 80014c8:	e7f9      	b.n	80014be <main+0xaa>
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	200000d0 	.word	0x200000d0
 80014d8:	40005400 	.word	0x40005400
 80014dc:	000186a0 	.word	0x000186a0

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_MspInit+0x34>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	9100      	str	r1, [sp, #0]
 80014e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ee:	645a      	str	r2, [r3, #68]	; 0x44
 80014f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	9101      	str	r1, [sp, #4]
 80014fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	b002      	add	sp, #8
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001518:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800151a:	6802      	ldr	r2, [r0, #0]
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_I2C_MspInit+0x68>)
{
 800151e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8001522:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001528:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800152c:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 800152e:	d001      	beq.n	8001534 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001530:	b008      	add	sp, #32
 8001532:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4d13      	ldr	r5, [pc, #76]	; (8001584 <HAL_I2C_MspInit+0x6c>)
 8001536:	9400      	str	r4, [sp, #0]
 8001538:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	632b      	str	r3, [r5, #48]	; 0x30
 8001542:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800154a:	22c0      	movs	r2, #192	; 0xc0
 800154c:	2312      	movs	r3, #18
 800154e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001552:	2201      	movs	r2, #1
 8001554:	2303      	movs	r3, #3
 8001556:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155c:	2304      	movs	r3, #4
 800155e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f000 f921 	bl	80017a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001566:	9401      	str	r4, [sp, #4]
 8001568:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800156a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156e:	642b      	str	r3, [r5, #64]	; 0x40
 8001570:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	9b01      	ldr	r3, [sp, #4]
}
 800157a:	b008      	add	sp, #32
 800157c:	bd70      	pop	{r4, r5, r6, pc}
 800157e:	bf00      	nop
 8001580:	40005400 	.word	0x40005400
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler>
 800158e:	bf00      	nop

08001590 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <HardFault_Handler>
 8001592:	bf00      	nop

08001594 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler>
 8001596:	bf00      	nop

08001598 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <BusFault_Handler>
 800159a:	bf00      	nop

0800159c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler>
 800159e:	bf00      	nop

080015a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop

080015a4 <DebugMon_Handler>:
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <PendSV_Handler>:
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 b872 	b.w	8001694 <HAL_IncTick>

080015b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <SystemInit+0x10>)
 80015b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e0:	4c0b      	ldr	r4, [pc, #44]	; (8001610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ee:	f7ff ffdf 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f001 f9b9 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff ff0d 	bl	8001414 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001608:	0800329c 	.word	0x0800329c
  ldr r2, =_sbss
 800160c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001610:	2000012c 	.word	0x2000012c

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_InitTick+0x3c>)
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_InitTick+0x40>)
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
{
 8001622:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001628:	fbb0 f0f2 	udiv	r0, r0, r2
 800162c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001630:	f000 f8a0 	bl	8001774 <HAL_SYSTICK_Config>
 8001634:	b908      	cbnz	r0, 800163a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	2d0f      	cmp	r5, #15
 8001638:	d901      	bls.n	800163e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800163c:	bd38      	pop	{r3, r4, r5, pc}
 800163e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	4602      	mov	r2, r0
 8001642:	4629      	mov	r1, r5
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f85c 	bl	8001704 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_InitTick+0x44>)
 800164e:	4620      	mov	r0, r4
 8001650:	601d      	str	r5, [r3, #0]
}
 8001652:	bd38      	pop	{r3, r4, r5, pc}
 8001654:	20000004 	.word	0x20000004
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008

08001660 <HAL_Init>:
{
 8001660:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_Init+0x30>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800166a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001672:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f82d 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ffc8 	bl	8001618 <HAL_InitTick>
  HAL_MspInit();
 8001688:	f7ff ff2a 	bl	80014e0 <HAL_MspInit>
}
 800168c:	2000      	movs	r0, #0
 800168e:	bd08      	pop	{r3, pc}
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_IncTick+0x10>)
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_IncTick+0x14>)
 8001698:	6811      	ldr	r1, [r2, #0]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	440b      	add	r3, r1
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000128 	.word	0x20000128
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016ac:	4b01      	ldr	r3, [pc, #4]	; (80016b4 <HAL_GetTick+0x8>)
 80016ae:	6818      	ldr	r0, [r3, #0]
}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000128 	.word	0x20000128

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff fff6 	bl	80016ac <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80016c2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80016c4:	d002      	beq.n	80016cc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_Delay+0x20>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	1b43      	subs	r3, r0, r5
 80016d2:	42a3      	cmp	r3, r4
 80016d4:	d3fa      	bcc.n	80016cc <HAL_Delay+0x14>
  {
  }
}
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4908      	ldr	r1, [pc, #32]	; (8001700 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80016de:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e2:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80016e8:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ea:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80016fc:	60cb      	str	r3, [r1, #12]
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_NVIC_SetPriority+0x68>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170e:	f1c3 0507 	rsb	r5, r3, #7
 8001712:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001714:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	bf28      	it	cs
 800171a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171c:	2c06      	cmp	r4, #6
 800171e:	d919      	bls.n	8001754 <HAL_NVIC_SetPriority+0x50>
 8001720:	3b03      	subs	r3, #3
 8001722:	f04f 34ff 	mov.w	r4, #4294967295
 8001726:	409c      	lsls	r4, r3
 8001728:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 34ff 	mov.w	r4, #4294967295
 8001730:	40ac      	lsls	r4, r5
 8001732:	ea21 0104 	bic.w	r1, r1, r4
 8001736:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001738:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800173e:	db0c      	blt.n	800175a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001744:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001748:	0109      	lsls	r1, r1, #4
 800174a:	b2c9      	uxtb	r1, r1
 800174c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001750:	bc30      	pop	{r4, r5}
 8001752:	4770      	bx	lr
 8001754:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	4613      	mov	r3, r2
 8001758:	e7e8      	b.n	800172c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_NVIC_SetPriority+0x6c>)
 800175c:	f000 000f 	and.w	r0, r0, #15
 8001760:	0109      	lsls	r1, r1, #4
 8001762:	4403      	add	r3, r0
 8001764:	b2c9      	uxtb	r1, r1
 8001766:	7619      	strb	r1, [r3, #24]
 8001768:	bc30      	pop	{r4, r5}
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	e000ecfc 	.word	0xe000ecfc

08001774 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	3801      	subs	r0, #1
 8001776:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800177a:	d20e      	bcs.n	800179a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	4c08      	ldr	r4, [pc, #32]	; (80017a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	20f0      	movs	r0, #240	; 0xf0
 8001786:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001792:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	6019      	str	r1, [r3, #0]
 8001798:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2001      	movs	r0, #1
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ac:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ae:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 800197c <HAL_GPIO_Init+0x1d4>
 80017b2:	6809      	ldr	r1, [r1, #0]
{
 80017b4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80017b8:	f04f 0a01 	mov.w	sl, #1
 80017bc:	46d9      	mov	r9, fp
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c0:	3301      	adds	r3, #1
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d079      	beq.n	80018ba <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80017c6:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 80017ce:	438a      	bics	r2, r1
 80017d0:	d1f6      	bne.n	80017c0 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80017d6:	f005 0203 	and.w	r2, r5, #3
 80017da:	1e54      	subs	r4, r2, #1
 80017dc:	2c01      	cmp	r4, #1
 80017de:	ea4f 0743 	mov.w	r7, r3, lsl #1
 80017e2:	d96d      	bls.n	80018c0 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	2a03      	cmp	r2, #3
 80017e6:	f040 80ab 	bne.w	8001940 <HAL_GPIO_Init+0x198>
 80017ea:	40ba      	lsls	r2, r7
 80017ec:	43d4      	mvns	r4, r2
 80017ee:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 80017f0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	9c00      	ldr	r4, [sp, #0]
 80017f4:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f6:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80017fc:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017fe:	d0df      	beq.n	80017c0 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001800:	4c59      	ldr	r4, [pc, #356]	; (8001968 <HAL_GPIO_Init+0x1c0>)
 8001802:	2200      	movs	r2, #0
 8001804:	9203      	str	r2, [sp, #12]
 8001806:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800180c:	6462      	str	r2, [r4, #68]	; 0x44
 800180e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001810:	f023 0603 	bic.w	r6, r3, #3
 8001814:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001818:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800181c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001820:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001822:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001828:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800182a:	00a4      	lsls	r4, r4, #2
 800182c:	220f      	movs	r2, #15
 800182e:	40a2      	lsls	r2, r4
 8001830:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001834:	4f4d      	ldr	r7, [pc, #308]	; (800196c <HAL_GPIO_Init+0x1c4>)
 8001836:	42b8      	cmp	r0, r7
 8001838:	d014      	beq.n	8001864 <HAL_GPIO_Init+0xbc>
 800183a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800183e:	42b8      	cmp	r0, r7
 8001840:	f000 8083 	beq.w	800194a <HAL_GPIO_Init+0x1a2>
 8001844:	4f4a      	ldr	r7, [pc, #296]	; (8001970 <HAL_GPIO_Init+0x1c8>)
 8001846:	42b8      	cmp	r0, r7
 8001848:	f000 8083 	beq.w	8001952 <HAL_GPIO_Init+0x1aa>
 800184c:	4f49      	ldr	r7, [pc, #292]	; (8001974 <HAL_GPIO_Init+0x1cc>)
 800184e:	42b8      	cmp	r0, r7
 8001850:	f000 8084 	beq.w	800195c <HAL_GPIO_Init+0x1b4>
 8001854:	4f48      	ldr	r7, [pc, #288]	; (8001978 <HAL_GPIO_Init+0x1d0>)
 8001856:	42b8      	cmp	r0, r7
 8001858:	bf0c      	ite	eq
 800185a:	2704      	moveq	r7, #4
 800185c:	2707      	movne	r7, #7
 800185e:	fa07 f404 	lsl.w	r4, r7, r4
 8001862:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001864:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 8001866:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 800186a:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186e:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001870:	bf54      	ite	pl
 8001872:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001874:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 8001878:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 800187c:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001880:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001882:	bf54      	ite	pl
 8001884:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001886:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 800188a:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188e:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001894:	bf54      	ite	pl
 8001896:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001898:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 800189c:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 80018a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a4:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80018aa:	bf54      	ite	pl
 80018ac:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80018ae:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b2:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80018b4:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b8:	d185      	bne.n	80017c6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80018ba:	b005      	add	sp, #20
 80018bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80018c0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c2:	2403      	movs	r4, #3
 80018c4:	40bc      	lsls	r4, r7
 80018c6:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ca:	f8d9 600c 	ldr.w	r6, [r9, #12]
 80018ce:	40be      	lsls	r6, r7
 80018d0:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 80018d4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80018d6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018da:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018de:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e2:	409e      	lsls	r6, r3
 80018e4:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e8:	43e4      	mvns	r4, r4
 80018ea:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 80018ec:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80018ee:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f0:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f4:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80018f8:	40be      	lsls	r6, r7
 80018fa:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001900:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001902:	d001      	beq.n	8001908 <HAL_GPIO_Init+0x160>
 8001904:	40ba      	lsls	r2, r7
 8001906:	e773      	b.n	80017f0 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 8001908:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800190c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001910:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001914:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8001918:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800191a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800191e:	240f      	movs	r4, #15
 8001920:	fa04 f60e 	lsl.w	r6, r4, lr
 8001924:	9c01      	ldr	r4, [sp, #4]
 8001926:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800192a:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192e:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001930:	fa04 f60e 	lsl.w	r6, r4, lr
 8001934:	9c01      	ldr	r4, [sp, #4]
 8001936:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001938:	40ba      	lsls	r2, r7
 800193a:	f8c8 6020 	str.w	r6, [r8, #32]
 800193e:	e757      	b.n	80017f0 <HAL_GPIO_Init+0x48>
 8001940:	2403      	movs	r4, #3
 8001942:	40bc      	lsls	r4, r7
 8001944:	43e4      	mvns	r4, r4
 8001946:	9400      	str	r4, [sp, #0]
 8001948:	e7d1      	b.n	80018ee <HAL_GPIO_Init+0x146>
 800194a:	fa0a f404 	lsl.w	r4, sl, r4
 800194e:	4322      	orrs	r2, r4
 8001950:	e788      	b.n	8001864 <HAL_GPIO_Init+0xbc>
 8001952:	2702      	movs	r7, #2
 8001954:	fa07 f404 	lsl.w	r4, r7, r4
 8001958:	4322      	orrs	r2, r4
 800195a:	e783      	b.n	8001864 <HAL_GPIO_Init+0xbc>
 800195c:	2703      	movs	r7, #3
 800195e:	fa07 f404 	lsl.w	r4, r7, r4
 8001962:	4322      	orrs	r2, r4
 8001964:	e77e      	b.n	8001864 <HAL_GPIO_Init+0xbc>
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40021000 	.word	0x40021000
 800197c:	40013c00 	.word	0x40013c00

08001980 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	b902      	cbnz	r2, 8001984 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001982:	0409      	lsls	r1, r1, #16
 8001984:	6181      	str	r1, [r0, #24]
  }
}
 8001986:	4770      	bx	lr

08001988 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	4605      	mov	r5, r0
 800198c:	460e      	mov	r6, r1
 800198e:	4617      	mov	r7, r2
 8001990:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001992:	682c      	ldr	r4, [r5, #0]
 8001994:	d003      	beq.n	800199e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8001996:	e009      	b.n	80019ac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001998:	6963      	ldr	r3, [r4, #20]
 800199a:	055b      	lsls	r3, r3, #21
 800199c:	d424      	bmi.n	80019e8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800199e:	6963      	ldr	r3, [r4, #20]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	f013 0302 	ands.w	r3, r3, #2
 80019a6:	d1f7      	bne.n	8001998 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80019a8:	4618      	mov	r0, r3
}
 80019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019ac:	6963      	ldr	r3, [r4, #20]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	f013 0302 	ands.w	r3, r3, #2
 80019b4:	d0f8      	beq.n	80019a8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019b6:	6963      	ldr	r3, [r4, #20]
 80019b8:	0559      	lsls	r1, r3, #21
 80019ba:	d415      	bmi.n	80019e8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019bc:	f7ff fe76 	bl	80016ac <HAL_GetTick>
 80019c0:	1bc0      	subs	r0, r0, r7
 80019c2:	4286      	cmp	r6, r0
 80019c4:	d301      	bcc.n	80019ca <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 80019c6:	2e00      	cmp	r6, #0
 80019c8:	d1e2      	bne.n	8001990 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019ca:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80019cc:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019ce:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019d0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80019da:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019de:	f043 0320 	orr.w	r3, r3, #32
 80019e2:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
}
 80019e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e8:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019ea:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ec:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 80019f4:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f6:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f8:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019fa:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019fc:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a00:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a04:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a06:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001a10:	2001      	movs	r0, #1
}
 8001a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a14 <I2C_RequestMemoryWrite>:
{
 8001a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a1a:	6800      	ldr	r0, [r0, #0]
{
 8001a1c:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a1e:	6807      	ldr	r7, [r0, #0]
{
 8001a20:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001a22:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a26:	f447 7780 	orr.w	r7, r7, #256	; 0x100
{
 8001a2a:	460d      	mov	r5, r1
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a30:	6007      	str	r7, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001a32:	1c72      	adds	r2, r6, #1
 8001a34:	d111      	bne.n	8001a5a <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a36:	6943      	ldr	r3, [r0, #20]
 8001a38:	07db      	lsls	r3, r3, #31
 8001a3a:	d5fc      	bpl.n	8001a36 <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a3c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001a40:	6105      	str	r5, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a42:	464a      	mov	r2, r9
 8001a44:	4631      	mov	r1, r6
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff ff9e 	bl	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8001a4c:	4605      	mov	r5, r0
 8001a4e:	b180      	cbz	r0, 8001a72 <I2C_RequestMemoryWrite+0x5e>
      return HAL_ERROR;
 8001a50:	2501      	movs	r5, #1
}
 8001a52:	4628      	mov	r0, r5
 8001a54:	b002      	add	sp, #8
 8001a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a5a:	6943      	ldr	r3, [r0, #20]
 8001a5c:	07df      	lsls	r7, r3, #31
 8001a5e:	d4ed      	bmi.n	8001a3c <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a60:	f7ff fe24 	bl	80016ac <HAL_GetTick>
 8001a64:	eba0 0009 	sub.w	r0, r0, r9
 8001a68:	4286      	cmp	r6, r0
 8001a6a:	d32a      	bcc.n	8001ac2 <I2C_RequestMemoryWrite+0xae>
 8001a6c:	b34e      	cbz	r6, 8001ac2 <I2C_RequestMemoryWrite+0xae>
 8001a6e:	6820      	ldr	r0, [r4, #0]
 8001a70:	e7df      	b.n	8001a32 <I2C_RequestMemoryWrite+0x1e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	9001      	str	r0, [sp, #4]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	9201      	str	r2, [sp, #4]
 8001a7a:	699a      	ldr	r2, [r3, #24]
 8001a7c:	9201      	str	r2, [sp, #4]
 8001a7e:	9a01      	ldr	r2, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a80:	1c72      	adds	r2, r6, #1
 8001a82:	d14d      	bne.n	8001b20 <I2C_RequestMemoryWrite+0x10c>
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	0617      	lsls	r7, r2, #24
 8001a88:	d434      	bmi.n	8001af4 <I2C_RequestMemoryWrite+0xe0>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	0550      	lsls	r0, r2, #21
 8001a8e:	d5f9      	bpl.n	8001a84 <I2C_RequestMemoryWrite+0x70>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a90:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a92:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a96:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a98:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a9a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a9c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d1cc      	bne.n	8001a50 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e7c6      	b.n	8001a50 <I2C_RequestMemoryWrite+0x3c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ac2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ac4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ac6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ac8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001acc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad2:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8001ad4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ade:	680b      	ldr	r3, [r1, #0]
 8001ae0:	05d9      	lsls	r1, r3, #23
 8001ae2:	d502      	bpl.n	8001aea <I2C_RequestMemoryWrite+0xd6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001aea:	2503      	movs	r5, #3
}
 8001aec:	4628      	mov	r0, r5
 8001aee:	b002      	add	sp, #8
 8001af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001af4:	f1ba 0f01 	cmp.w	sl, #1
 8001af8:	d106      	bne.n	8001b08 <I2C_RequestMemoryWrite+0xf4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001afa:	fa5f f288 	uxtb.w	r2, r8
}
 8001afe:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	b002      	add	sp, #8
 8001b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b08:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001b0c:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b0e:	1c77      	adds	r7, r6, #1
 8001b10:	d115      	bne.n	8001b3e <I2C_RequestMemoryWrite+0x12a>
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	0610      	lsls	r0, r2, #24
 8001b16:	d4f0      	bmi.n	8001afa <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	0551      	lsls	r1, r2, #21
 8001b1c:	d5f9      	bpl.n	8001b12 <I2C_RequestMemoryWrite+0xfe>
 8001b1e:	e7b7      	b.n	8001a90 <I2C_RequestMemoryWrite+0x7c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	0611      	lsls	r1, r2, #24
 8001b24:	d4e6      	bmi.n	8001af4 <I2C_RequestMemoryWrite+0xe0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	0551      	lsls	r1, r2, #21
 8001b2a:	d4b1      	bmi.n	8001a90 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2c:	f7ff fdbe 	bl	80016ac <HAL_GetTick>
 8001b30:	eba0 0009 	sub.w	r0, r0, r9
 8001b34:	4286      	cmp	r6, r0
 8001b36:	d311      	bcc.n	8001b5c <I2C_RequestMemoryWrite+0x148>
 8001b38:	b186      	cbz	r6, 8001b5c <I2C_RequestMemoryWrite+0x148>
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	e7a0      	b.n	8001a80 <I2C_RequestMemoryWrite+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	0612      	lsls	r2, r2, #24
 8001b42:	d4da      	bmi.n	8001afa <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	0552      	lsls	r2, r2, #21
 8001b48:	d4a2      	bmi.n	8001a90 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4a:	f7ff fdaf 	bl	80016ac <HAL_GetTick>
 8001b4e:	eba0 0009 	sub.w	r0, r0, r9
 8001b52:	4286      	cmp	r6, r0
 8001b54:	d302      	bcc.n	8001b5c <I2C_RequestMemoryWrite+0x148>
 8001b56:	b10e      	cbz	r6, 8001b5c <I2C_RequestMemoryWrite+0x148>
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	e7d8      	b.n	8001b0e <I2C_RequestMemoryWrite+0xfa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b5c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b5e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b60:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b66:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001b6c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001b76:	e79b      	b.n	8001ab0 <I2C_RequestMemoryWrite+0x9c>

08001b78 <I2C_RequestMemoryRead>:
{
 8001b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b7c:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7e:	6800      	ldr	r0, [r0, #0]
 8001b80:	6807      	ldr	r7, [r0, #0]
 8001b82:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 8001b86:	6007      	str	r7, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b88:	6805      	ldr	r5, [r0, #0]
{
 8001b8a:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b8c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
{
 8001b90:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001b92:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b96:	6005      	str	r5, [r0, #0]
{
 8001b98:	468a      	mov	sl, r1
 8001b9a:	4617      	mov	r7, r2
 8001b9c:	4698      	mov	r8, r3
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001b9e:	1c73      	adds	r3, r6, #1
 8001ba0:	d111      	bne.n	8001bc6 <I2C_RequestMemoryRead+0x4e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba2:	6943      	ldr	r3, [r0, #20]
 8001ba4:	07dd      	lsls	r5, r3, #31
 8001ba6:	d5fc      	bpl.n	8001ba2 <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ba8:	f00a 03fe 	and.w	r3, sl, #254	; 0xfe
 8001bac:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bae:	464a      	mov	r2, r9
 8001bb0:	4631      	mov	r1, r6
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff fee8 	bl	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bb8:	fa5f fa8a 	uxtb.w	sl, sl
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bbc:	b178      	cbz	r0, 8001bde <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8001bbe:	2001      	movs	r0, #1
}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc6:	6943      	ldr	r3, [r0, #20]
 8001bc8:	07d9      	lsls	r1, r3, #31
 8001bca:	d4ed      	bmi.n	8001ba8 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bcc:	f7ff fd6e 	bl	80016ac <HAL_GetTick>
 8001bd0:	eba0 0009 	sub.w	r0, r0, r9
 8001bd4:	4286      	cmp	r6, r0
 8001bd6:	d32a      	bcc.n	8001c2e <I2C_RequestMemoryRead+0xb6>
 8001bd8:	b34e      	cbz	r6, 8001c2e <I2C_RequestMemoryRead+0xb6>
 8001bda:	6820      	ldr	r0, [r4, #0]
 8001bdc:	e7df      	b.n	8001b9e <I2C_RequestMemoryRead+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	6825      	ldr	r5, [r4, #0]
 8001be0:	9001      	str	r0, [sp, #4]
 8001be2:	696b      	ldr	r3, [r5, #20]
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	69ab      	ldr	r3, [r5, #24]
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bec:	1c73      	adds	r3, r6, #1
 8001bee:	d171      	bne.n	8001cd4 <I2C_RequestMemoryRead+0x15c>
 8001bf0:	696b      	ldr	r3, [r5, #20]
 8001bf2:	0618      	lsls	r0, r3, #24
 8001bf4:	d433      	bmi.n	8001c5e <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bf6:	696b      	ldr	r3, [r5, #20]
 8001bf8:	0559      	lsls	r1, r3, #21
 8001bfa:	d5f9      	bpl.n	8001bf0 <I2C_RequestMemoryRead+0x78>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bfc:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bfe:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c00:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8001c04:	6169      	str	r1, [r5, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c0c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8001c12:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d1cd      	bne.n	8001bbe <I2C_RequestMemoryRead+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e7c7      	b.n	8001bbe <I2C_RequestMemoryRead+0x46>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c2e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c30:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c32:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c38:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c3e:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8001c40:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c44:	f043 0320 	orr.w	r3, r3, #32
 8001c48:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c4a:	680b      	ldr	r3, [r1, #0]
 8001c4c:	05d8      	lsls	r0, r3, #23
 8001c4e:	d502      	bpl.n	8001c56 <I2C_RequestMemoryRead+0xde>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c54:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001c56:	2003      	movs	r0, #3
}
 8001c58:	b002      	add	sp, #8
 8001c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c5e:	f1b8 0f01 	cmp.w	r8, #1
 8001c62:	d10a      	bne.n	8001c7a <I2C_RequestMemoryRead+0x102>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c64:	b2ff      	uxtb	r7, r7
 8001c66:	612f      	str	r7, [r5, #16]
 8001c68:	1c71      	adds	r1, r6, #1
 8001c6a:	d142      	bne.n	8001cf2 <I2C_RequestMemoryRead+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c6c:	696b      	ldr	r3, [r5, #20]
 8001c6e:	061a      	lsls	r2, r3, #24
 8001c70:	d40e      	bmi.n	8001c90 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c72:	696b      	ldr	r3, [r5, #20]
 8001c74:	055b      	lsls	r3, r3, #21
 8001c76:	d5f9      	bpl.n	8001c6c <I2C_RequestMemoryRead+0xf4>
 8001c78:	e7c0      	b.n	8001bfc <I2C_RequestMemoryRead+0x84>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c7a:	0a3b      	lsrs	r3, r7, #8
 8001c7c:	612b      	str	r3, [r5, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c7e:	1c70      	adds	r0, r6, #1
 8001c80:	d147      	bne.n	8001d12 <I2C_RequestMemoryRead+0x19a>
 8001c82:	696b      	ldr	r3, [r5, #20]
 8001c84:	0619      	lsls	r1, r3, #24
 8001c86:	d4ed      	bmi.n	8001c64 <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c88:	696b      	ldr	r3, [r5, #20]
 8001c8a:	055a      	lsls	r2, r3, #21
 8001c8c:	d5f9      	bpl.n	8001c82 <I2C_RequestMemoryRead+0x10a>
 8001c8e:	e7b5      	b.n	8001bfc <I2C_RequestMemoryRead+0x84>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001c98:	1c71      	adds	r1, r6, #1
 8001c9a:	d10e      	bne.n	8001cba <I2C_RequestMemoryRead+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c9c:	696b      	ldr	r3, [r5, #20]
 8001c9e:	07da      	lsls	r2, r3, #31
 8001ca0:	d5fc      	bpl.n	8001c9c <I2C_RequestMemoryRead+0x124>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ca2:	f04a 0101 	orr.w	r1, sl, #1
 8001ca6:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ca8:	464a      	mov	r2, r9
 8001caa:	4631      	mov	r1, r6
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fe6b 	bl	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
    return HAL_TIMEOUT;
 8001cb2:	3800      	subs	r0, #0
 8001cb4:	bf18      	it	ne
 8001cb6:	2001      	movne	r0, #1
 8001cb8:	e782      	b.n	8001bc0 <I2C_RequestMemoryRead+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cba:	696b      	ldr	r3, [r5, #20]
 8001cbc:	07db      	lsls	r3, r3, #31
 8001cbe:	d4f0      	bmi.n	8001ca2 <I2C_RequestMemoryRead+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc0:	f7ff fcf4 	bl	80016ac <HAL_GetTick>
 8001cc4:	eba0 0009 	sub.w	r0, r0, r9
 8001cc8:	4286      	cmp	r6, r0
 8001cca:	d3b0      	bcc.n	8001c2e <I2C_RequestMemoryRead+0xb6>
 8001ccc:	2e00      	cmp	r6, #0
 8001cce:	d0ae      	beq.n	8001c2e <I2C_RequestMemoryRead+0xb6>
 8001cd0:	6825      	ldr	r5, [r4, #0]
 8001cd2:	e7e1      	b.n	8001c98 <I2C_RequestMemoryRead+0x120>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd4:	696b      	ldr	r3, [r5, #20]
 8001cd6:	061a      	lsls	r2, r3, #24
 8001cd8:	d4c1      	bmi.n	8001c5e <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cda:	696b      	ldr	r3, [r5, #20]
 8001cdc:	055a      	lsls	r2, r3, #21
 8001cde:	d48d      	bmi.n	8001bfc <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce0:	f7ff fce4 	bl	80016ac <HAL_GetTick>
 8001ce4:	eba0 0009 	sub.w	r0, r0, r9
 8001ce8:	4286      	cmp	r6, r0
 8001cea:	d322      	bcc.n	8001d32 <I2C_RequestMemoryRead+0x1ba>
 8001cec:	b30e      	cbz	r6, 8001d32 <I2C_RequestMemoryRead+0x1ba>
 8001cee:	6825      	ldr	r5, [r4, #0]
 8001cf0:	e77c      	b.n	8001bec <I2C_RequestMemoryRead+0x74>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf2:	696b      	ldr	r3, [r5, #20]
 8001cf4:	061f      	lsls	r7, r3, #24
 8001cf6:	d4cb      	bmi.n	8001c90 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf8:	696b      	ldr	r3, [r5, #20]
 8001cfa:	0558      	lsls	r0, r3, #21
 8001cfc:	f53f af7e 	bmi.w	8001bfc <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d00:	f7ff fcd4 	bl	80016ac <HAL_GetTick>
 8001d04:	eba0 0009 	sub.w	r0, r0, r9
 8001d08:	4286      	cmp	r6, r0
 8001d0a:	d312      	bcc.n	8001d32 <I2C_RequestMemoryRead+0x1ba>
 8001d0c:	b18e      	cbz	r6, 8001d32 <I2C_RequestMemoryRead+0x1ba>
 8001d0e:	6825      	ldr	r5, [r4, #0]
 8001d10:	e7aa      	b.n	8001c68 <I2C_RequestMemoryRead+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d12:	696b      	ldr	r3, [r5, #20]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	d4a5      	bmi.n	8001c64 <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d18:	696b      	ldr	r3, [r5, #20]
 8001d1a:	055b      	lsls	r3, r3, #21
 8001d1c:	f53f af6e 	bmi.w	8001bfc <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7ff fcc4 	bl	80016ac <HAL_GetTick>
 8001d24:	eba0 0009 	sub.w	r0, r0, r9
 8001d28:	4286      	cmp	r6, r0
 8001d2a:	d302      	bcc.n	8001d32 <I2C_RequestMemoryRead+0x1ba>
 8001d2c:	b10e      	cbz	r6, 8001d32 <I2C_RequestMemoryRead+0x1ba>
 8001d2e:	6825      	ldr	r5, [r4, #0]
 8001d30:	e7a5      	b.n	8001c7e <I2C_RequestMemoryRead+0x106>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d32:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d34:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d36:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d3c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d42:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d46:	f043 0320 	orr.w	r3, r3, #32
 8001d4a:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001d4c:	e766      	b.n	8001c1c <I2C_RequestMemoryRead+0xa4>
 8001d4e:	bf00      	nop

08001d50 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001d50:	2800      	cmp	r0, #0
 8001d52:	f000 80b5 	beq.w	8001ec0 <HAL_I2C_Init+0x170>
{
 8001d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8094 	beq.w	8001e90 <HAL_I2C_Init+0x140>
  __HAL_I2C_DISABLE(hi2c);
 8001d68:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d86:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d88:	f000 fdd8 	bl	800293c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8c:	6865      	ldr	r5, [r4, #4]
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_I2C_Init+0x174>)
 8001d90:	429d      	cmp	r5, r3
 8001d92:	d84c      	bhi.n	8001e2e <HAL_I2C_Init+0xde>
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_I2C_Init+0x178>)
 8001d96:	4298      	cmp	r0, r3
 8001d98:	d978      	bls.n	8001e8c <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d9a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d9e:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001da0:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001da4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001da8:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 8001dac:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dae:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8001db0:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001db2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001db6:	3301      	adds	r3, #1
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dbc:	69d1      	ldr	r1, [r2, #28]
 8001dbe:	3801      	subs	r0, #1
 8001dc0:	006b      	lsls	r3, r5, #1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001dd0:	4203      	tst	r3, r0
 8001dd2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001dd6:	d160      	bne.n	8001e9a <HAL_I2C_Init+0x14a>
 8001dd8:	2304      	movs	r3, #4
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dde:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8001de2:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001de4:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8001dea:	432b      	orrs	r3, r5
 8001dec:	4303      	orrs	r3, r0
 8001dee:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df0:	6890      	ldr	r0, [r2, #8]
 8001df2:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df4:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df6:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8001dfa:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001dfe:	4329      	orrs	r1, r5
 8001e00:	4301      	orrs	r1, r0
 8001e02:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e04:	68d1      	ldr	r1, [r2, #12]
 8001e06:	69a0      	ldr	r0, [r4, #24]
 8001e08:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001e0c:	4303      	orrs	r3, r0
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001e12:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8001e16:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001e1c:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1e:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e20:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e24:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8001e2a:	4618      	mov	r0, r3
}
 8001e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2e:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_I2C_Init+0x180>)
 8001e30:	4298      	cmp	r0, r3
 8001e32:	d92b      	bls.n	8001e8c <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e34:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001e36:	4925      	ldr	r1, [pc, #148]	; (8001ecc <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e38:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3a:	4f26      	ldr	r7, [pc, #152]	; (8001ed4 <HAL_I2C_Init+0x184>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3c:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e40:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001e44:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e48:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4c:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4e:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e50:	fb03 f301 	mul.w	r3, r3, r1
 8001e54:	fba7 1303 	umull	r1, r3, r7, r3
 8001e58:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e5a:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001e62:	3301      	adds	r3, #1
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e68:	69d1      	ldr	r1, [r2, #28]
 8001e6a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001e6e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001e72:	b9ae      	cbnz	r6, 8001ea0 <HAL_I2C_Init+0x150>
 8001e74:	3801      	subs	r0, #1
 8001e76:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	b1d3      	cbz	r3, 8001ebc <HAL_I2C_Init+0x16c>
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	e7a6      	b.n	8001dda <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
}
 8001e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001e90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001e94:	f7ff fb40 	bl	8001518 <HAL_I2C_MspInit>
 8001e98:	e766      	b.n	8001d68 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9e:	e79c      	b.n	8001dda <HAL_I2C_Init+0x8a>
 8001ea0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001ea4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ea8:	3801      	subs	r0, #1
 8001eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb4:	b113      	cbz	r3, 8001ebc <HAL_I2C_Init+0x16c>
 8001eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eba:	e78e      	b.n	8001dda <HAL_I2C_Init+0x8a>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e78c      	b.n	8001dda <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8001ec0:	2001      	movs	r0, #1
}
 8001ec2:	4770      	bx	lr
 8001ec4:	000186a0 	.word	0x000186a0
 8001ec8:	001e847f 	.word	0x001e847f
 8001ecc:	431bde83 	.word	0x431bde83
 8001ed0:	003d08ff 	.word	0x003d08ff
 8001ed4:	10624dd3 	.word	0x10624dd3

08001ed8 <HAL_I2C_Mem_Write>:
{
 8001ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001edc:	4604      	mov	r4, r0
 8001ede:	b083      	sub	sp, #12
 8001ee0:	4699      	mov	r9, r3
 8001ee2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001ee6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001ee8:	460f      	mov	r7, r1
 8001eea:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fbde 	bl	80016ac <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d005      	beq.n	8001f04 <HAL_I2C_Mem_Write+0x2c>
      return HAL_BUSY;
 8001ef8:	f04f 0802 	mov.w	r8, #2
}
 8001efc:	4640      	mov	r0, r8
 8001efe:	b003      	add	sp, #12
 8001f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f04:	4605      	mov	r5, r0
 8001f06:	e005      	b.n	8001f14 <HAL_I2C_Mem_Write+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f08:	f7ff fbd0 	bl	80016ac <HAL_GetTick>
 8001f0c:	1b40      	subs	r0, r0, r5
 8001f0e:	2819      	cmp	r0, #25
 8001f10:	f200 80a8 	bhi.w	8002064 <HAL_I2C_Mem_Write+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	6998      	ldr	r0, [r3, #24]
 8001f18:	43c0      	mvns	r0, r0
 8001f1a:	f010 0b02 	ands.w	fp, r0, #2
 8001f1e:	d0f3      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x30>
    __HAL_LOCK(hi2c);
 8001f20:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8001f24:	2a01      	cmp	r2, #1
 8001f26:	d0e7      	beq.n	8001ef8 <HAL_I2C_Mem_Write+0x20>
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	07d2      	lsls	r2, r2, #31
 8001f32:	d571      	bpl.n	8002018 <HAL_I2C_Mem_Write+0x140>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f34:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f36:	4861      	ldr	r0, [pc, #388]	; (80020bc <HAL_I2C_Mem_Write+0x1e4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f3c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f3e:	2321      	movs	r3, #33	; 0x21
 8001f40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f44:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f46:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f48:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001f4e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f52:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f58:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f5a:	4642      	mov	r2, r8
 8001f5c:	e9cd 6500 	strd	r6, r5, [sp]
 8001f60:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f62:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f64:	4639      	mov	r1, r7
    hi2c->XferSize    = hi2c->XferCount;
 8001f66:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7ff fd52 	bl	8001a14 <I2C_RequestMemoryWrite>
 8001f70:	4680      	mov	r8, r0
 8001f72:	b9f8      	cbnz	r0, 8001fb4 <HAL_I2C_Mem_Write+0xdc>
    while (hi2c->XferSize > 0U)
 8001f74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 809d 	beq.w	80020b6 <HAL_I2C_Mem_Write+0x1de>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	1c71      	adds	r1, r6, #1
 8001f80:	d155      	bne.n	800202e <HAL_I2C_Mem_Write+0x156>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	0612      	lsls	r2, r2, #24
 8001f86:	d41b      	bmi.n	8001fc0 <HAL_I2C_Mem_Write+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	0557      	lsls	r7, r2, #21
 8001f8c:	d5f9      	bpl.n	8001f82 <HAL_I2C_Mem_Write+0xaa>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8e:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f90:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f94:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f96:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f98:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f9a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8001fa4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d036      	beq.n	8002022 <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 8001fb4:	f04f 0801 	mov.w	r8, #1
}
 8001fb8:	4640      	mov	r0, r8
 8001fba:	b003      	add	sp, #12
 8001fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001fc2:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc6:	4607      	mov	r7, r0
      hi2c->XferSize--;
 8001fc8:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fcc:	f817 2b01 	ldrb.w	r2, [r7], #1
 8001fd0:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001fd2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001fd4:	6267      	str	r7, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fd6:	3a01      	subs	r2, #1
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fdc:	695f      	ldr	r7, [r3, #20]
      hi2c->XferSize--;
 8001fde:	b28a      	uxth	r2, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fe0:	0779      	lsls	r1, r7, #29
      hi2c->XferSize--;
 8001fe2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fe4:	d515      	bpl.n	8002012 <HAL_I2C_Mem_Write+0x13a>
 8001fe6:	b942      	cbnz	r2, 8001ffa <HAL_I2C_Mem_Write+0x122>
 8001fe8:	1c77      	adds	r7, r6, #1
 8001fea:	d156      	bne.n	800209a <HAL_I2C_Mem_Write+0x1c2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	0750      	lsls	r0, r2, #29
 8001ff0:	d446      	bmi.n	8002080 <HAL_I2C_Mem_Write+0x1a8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	0551      	lsls	r1, r2, #21
 8001ff6:	d5f9      	bpl.n	8001fec <HAL_I2C_Mem_Write+0x114>
 8001ff8:	e7c9      	b.n	8001f8e <HAL_I2C_Mem_Write+0xb6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ffa:	7842      	ldrb	r2, [r0, #1]
 8001ffc:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001ffe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002000:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->XferCount--;
 8002004:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8002006:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002008:	3002      	adds	r0, #2
        hi2c->XferCount--;
 800200a:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 800200c:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800200e:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002010:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002012:	2a00      	cmp	r2, #0
 8002014:	d1b3      	bne.n	8001f7e <HAL_I2C_Mem_Write+0xa6>
 8002016:	e7e7      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x110>
      __HAL_I2C_ENABLE(hi2c);
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e788      	b.n	8001f34 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	6822      	ldr	r2, [r4, #0]
 8002024:	6813      	ldr	r3, [r2, #0]
 8002026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e7c2      	b.n	8001fb4 <HAL_I2C_Mem_Write+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	0610      	lsls	r0, r2, #24
 8002032:	d4c5      	bmi.n	8001fc0 <HAL_I2C_Mem_Write+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	0550      	lsls	r0, r2, #21
 8002038:	d4a9      	bmi.n	8001f8e <HAL_I2C_Mem_Write+0xb6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203a:	f7ff fb37 	bl	80016ac <HAL_GetTick>
 800203e:	1b40      	subs	r0, r0, r5
 8002040:	4286      	cmp	r6, r0
 8002042:	d301      	bcc.n	8002048 <HAL_I2C_Mem_Write+0x170>
 8002044:	2e00      	cmp	r6, #0
 8002046:	d199      	bne.n	8001f7c <HAL_I2C_Mem_Write+0xa4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002048:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800204a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800204c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800204e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002052:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002056:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002058:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800205c:	f043 0320 	orr.w	r3, r3, #32
 8002060:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002062:	e7a4      	b.n	8001fae <HAL_I2C_Mem_Write+0xd6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002064:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002066:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800206a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800206e:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002072:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002074:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	6423      	str	r3, [r4, #64]	; 0x40
 800207e:	e73b      	b.n	8001ef8 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002080:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002082:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002084:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800208c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002090:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8002098:	e730      	b.n	8001efc <HAL_I2C_Mem_Write+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	0752      	lsls	r2, r2, #29
 800209e:	d4ef      	bmi.n	8002080 <HAL_I2C_Mem_Write+0x1a8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	0552      	lsls	r2, r2, #21
 80020a4:	f53f af73 	bmi.w	8001f8e <HAL_I2C_Mem_Write+0xb6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a8:	f7ff fb00 	bl	80016ac <HAL_GetTick>
 80020ac:	1b40      	subs	r0, r0, r5
 80020ae:	4286      	cmp	r6, r0
 80020b0:	d3ca      	bcc.n	8002048 <HAL_I2C_Mem_Write+0x170>
 80020b2:	2e00      	cmp	r6, #0
 80020b4:	d0c8      	beq.n	8002048 <HAL_I2C_Mem_Write+0x170>
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	e796      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x110>
 80020ba:	bf00      	nop
 80020bc:	ffff0000 	.word	0xffff0000

080020c0 <HAL_I2C_Mem_Read>:
{
 80020c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c4:	4604      	mov	r4, r0
 80020c6:	b087      	sub	sp, #28
 80020c8:	469a      	mov	sl, r3
 80020ca:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
 80020ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80020d0:	4688      	mov	r8, r1
 80020d2:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff faea 	bl	80016ac <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d004      	beq.n	80020ea <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80020e0:	2502      	movs	r5, #2
}
 80020e2:	4628      	mov	r0, r5
 80020e4:	b007      	add	sp, #28
 80020e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ea:	4607      	mov	r7, r0
 80020ec:	e005      	b.n	80020fa <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7ff fadd 	bl	80016ac <HAL_GetTick>
 80020f2:	1bc0      	subs	r0, r0, r7
 80020f4:	2819      	cmp	r0, #25
 80020f6:	f200 80c9 	bhi.w	800228c <HAL_I2C_Mem_Read+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	699d      	ldr	r5, [r3, #24]
 80020fe:	43ed      	mvns	r5, r5
 8002100:	f015 0502 	ands.w	r5, r5, #2
 8002104:	d0f3      	beq.n	80020ee <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8002106:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800210a:	2a01      	cmp	r2, #1
 800210c:	d0e8      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x20>
 800210e:	2201      	movs	r2, #1
 8002110:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	07d1      	lsls	r1, r2, #31
 8002118:	d535      	bpl.n	8002186 <HAL_I2C_Mem_Read+0xc6>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211a:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211c:	48a1      	ldr	r0, [pc, #644]	; (80023a4 <HAL_I2C_Mem_Read+0x2e4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002122:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002124:	2322      	movs	r3, #34	; 0x22
 8002126:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800212a:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800212e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002132:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002134:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002138:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800213a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800213c:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800213e:	464a      	mov	r2, r9
 8002140:	e9cd 6700 	strd	r6, r7, [sp]
 8002144:	4653      	mov	r3, sl
    hi2c->XferSize    = hi2c->XferCount;
 8002146:	8525      	strh	r5, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002148:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800214a:	4641      	mov	r1, r8
 800214c:	4620      	mov	r0, r4
 800214e:	f7ff fd13 	bl	8001b78 <I2C_RequestMemoryRead>
 8002152:	4605      	mov	r5, r0
 8002154:	2800      	cmp	r0, #0
 8002156:	f040 80a6 	bne.w	80022a6 <HAL_I2C_Mem_Read+0x1e6>
    if (hi2c->XferSize == 0U)
 800215a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800215e:	b9ba      	cbnz	r2, 8002190 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002160:	9002      	str	r0, [sp, #8]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	9202      	str	r2, [sp, #8]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	9202      	str	r2, [sp, #8]
 800216a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002176:	2220      	movs	r2, #32
 8002178:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800217c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002180:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002184:	e7ad      	b.n	80020e2 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e7c4      	b.n	800211a <HAL_I2C_Mem_Read+0x5a>
    else if (hi2c->XferSize == 1U)
 8002190:	2a01      	cmp	r2, #1
 8002192:	f000 8109 	beq.w	80023a8 <HAL_I2C_Mem_Read+0x2e8>
    else if (hi2c->XferSize == 2U)
 8002196:	2a02      	cmp	r2, #2
 8002198:	f000 809b 	beq.w	80022d2 <HAL_I2C_Mem_Read+0x212>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	9005      	str	r0, [sp, #20]
 800219e:	6959      	ldr	r1, [r3, #20]
 80021a0:	9105      	str	r1, [sp, #20]
 80021a2:	6999      	ldr	r1, [r3, #24]
 80021a4:	9105      	str	r1, [sp, #20]
 80021a6:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 80021a8:	2a03      	cmp	r2, #3
 80021aa:	d849      	bhi.n	8002240 <HAL_I2C_Mem_Read+0x180>
        if (hi2c->XferSize == 1U)
 80021ac:	2a01      	cmp	r2, #1
 80021ae:	f000 80c9 	beq.w	8002344 <HAL_I2C_Mem_Read+0x284>
        else if (hi2c->XferSize == 2U)
 80021b2:	2a02      	cmp	r2, #2
 80021b4:	f000 8087 	beq.w	80022c6 <HAL_I2C_Mem_Read+0x206>
 80021b8:	1c71      	adds	r1, r6, #1
 80021ba:	f040 8099 	bne.w	80022f0 <HAL_I2C_Mem_Read+0x230>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	0752      	lsls	r2, r2, #29
 80021c2:	d5fc      	bpl.n	80021be <HAL_I2C_Mem_Read+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c4:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021cc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80021d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80021d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80021d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80021dc:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80021de:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80021e0:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80021e2:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80021e4:	8522      	strh	r2, [r4, #40]	; 0x28
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80021e6:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	f040 808d 	bne.w	8002308 <HAL_I2C_Mem_Read+0x248>
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	d5fc      	bpl.n	80021ee <HAL_I2C_Mem_Read+0x12e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002202:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002204:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002206:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002208:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 800220a:	3b01      	subs	r3, #1
 800220c:	b29b      	uxth	r3, r3
 800220e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002210:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 8002212:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8002216:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 8002218:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800221c:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221e:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 8002220:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002222:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002224:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002226:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002228:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 800222a:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800222c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800222e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002230:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002232:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002234:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8002236:	2a00      	cmp	r2, #0
 8002238:	d09c      	beq.n	8002174 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800223a:	2a03      	cmp	r2, #3
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	d9b5      	bls.n	80021ac <HAL_I2C_Mem_Read+0xec>
 8002240:	b956      	cbnz	r6, 8002258 <HAL_I2C_Mem_Read+0x198>
 8002242:	e0a1      	b.n	8002388 <HAL_I2C_Mem_Read+0x2c8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	06d0      	lsls	r0, r2, #27
 8002248:	f100 808e 	bmi.w	8002368 <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224c:	f7ff fa2e 	bl	80016ac <HAL_GetTick>
 8002250:	1bc0      	subs	r0, r0, r7
 8002252:	4286      	cmp	r6, r0
 8002254:	d364      	bcc.n	8002320 <HAL_I2C_Mem_Read+0x260>
 8002256:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	0652      	lsls	r2, r2, #25
 800225c:	d5f2      	bpl.n	8002244 <HAL_I2C_Mem_Read+0x184>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8002264:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002266:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8002268:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800226a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800226c:	3b01      	subs	r3, #1
 800226e:	b29b      	uxth	r3, r3
 8002270:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002272:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8002274:	3a01      	subs	r2, #1
 8002276:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002278:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800227c:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 800227e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002280:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002284:	d5d7      	bpl.n	8002236 <HAL_I2C_Mem_Read+0x176>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002286:	6903      	ldr	r3, [r0, #16]
 8002288:	704b      	strb	r3, [r1, #1]
 800228a:	e7c9      	b.n	8002220 <HAL_I2C_Mem_Read+0x160>
        hi2c->State             = HAL_I2C_STATE_READY;
 800228c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800228e:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002290:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002294:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002298:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800229a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800229e:	f043 0320 	orr.w	r3, r3, #32
 80022a2:	6423      	str	r3, [r4, #64]	; 0x40
 80022a4:	e71c      	b.n	80020e0 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 80022a6:	2501      	movs	r5, #1
}
 80022a8:	4628      	mov	r0, r5
 80022aa:	b007      	add	sp, #28
 80022ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	0750      	lsls	r0, r2, #29
 80022b4:	d49e      	bmi.n	80021f4 <HAL_I2C_Mem_Read+0x134>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7ff f9f9 	bl	80016ac <HAL_GetTick>
 80022ba:	1bc0      	subs	r0, r0, r7
 80022bc:	4286      	cmp	r6, r0
 80022be:	d32f      	bcc.n	8002320 <HAL_I2C_Mem_Read+0x260>
 80022c0:	2e00      	cmp	r6, #0
 80022c2:	d02d      	beq.n	8002320 <HAL_I2C_Mem_Read+0x260>
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	1c71      	adds	r1, r6, #1
 80022c8:	d1f2      	bne.n	80022b0 <HAL_I2C_Mem_Read+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	0752      	lsls	r2, r2, #29
 80022ce:	d5fc      	bpl.n	80022ca <HAL_I2C_Mem_Read+0x20a>
 80022d0:	e790      	b.n	80021f4 <HAL_I2C_Mem_Read+0x134>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80022d8:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80022e0:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	9004      	str	r0, [sp, #16]
 80022e4:	6959      	ldr	r1, [r3, #20]
 80022e6:	9104      	str	r1, [sp, #16]
 80022e8:	6999      	ldr	r1, [r3, #24]
 80022ea:	9104      	str	r1, [sp, #16]
 80022ec:	9904      	ldr	r1, [sp, #16]
 80022ee:	e75b      	b.n	80021a8 <HAL_I2C_Mem_Read+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	0750      	lsls	r0, r2, #29
 80022f4:	f53f af66 	bmi.w	80021c4 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f8:	f7ff f9d8 	bl	80016ac <HAL_GetTick>
 80022fc:	1bc0      	subs	r0, r0, r7
 80022fe:	4286      	cmp	r6, r0
 8002300:	d30e      	bcc.n	8002320 <HAL_I2C_Mem_Read+0x260>
 8002302:	b16e      	cbz	r6, 8002320 <HAL_I2C_Mem_Read+0x260>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	e757      	b.n	80021b8 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	0750      	lsls	r0, r2, #29
 800230c:	f53f af72 	bmi.w	80021f4 <HAL_I2C_Mem_Read+0x134>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7ff f9cc 	bl	80016ac <HAL_GetTick>
 8002314:	1bc0      	subs	r0, r0, r7
 8002316:	4286      	cmp	r6, r0
 8002318:	d302      	bcc.n	8002320 <HAL_I2C_Mem_Read+0x260>
 800231a:	2e00      	cmp	r6, #0
 800231c:	f47f af63 	bne.w	80021e6 <HAL_I2C_Mem_Read+0x126>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002320:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002322:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002324:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002326:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800232a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800232e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002330:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002334:	2501      	movs	r5, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002336:	f043 0320 	orr.w	r3, r3, #32
}
 800233a:	4628      	mov	r0, r5
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800233e:	b007      	add	sp, #28
 8002340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002344:	b94e      	cbnz	r6, 800235a <HAL_I2C_Mem_Read+0x29a>
 8002346:	e029      	b.n	800239c <HAL_I2C_Mem_Read+0x2dc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	06d2      	lsls	r2, r2, #27
 800234c:	d40c      	bmi.n	8002368 <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7ff f9ad 	bl	80016ac <HAL_GetTick>
 8002352:	1bc0      	subs	r0, r0, r7
 8002354:	4286      	cmp	r6, r0
 8002356:	d3e3      	bcc.n	8002320 <HAL_I2C_Mem_Read+0x260>
 8002358:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	0651      	lsls	r1, r2, #25
 800235e:	d5f3      	bpl.n	8002348 <HAL_I2C_Mem_Read+0x288>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8002366:	e75b      	b.n	8002220 <HAL_I2C_Mem_Read+0x160>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002368:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236a:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800236e:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002370:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002372:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002374:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002378:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800237c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800237e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002382:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002384:	2501      	movs	r5, #1
 8002386:	e6ac      	b.n	80020e2 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	0652      	lsls	r2, r2, #25
 800238c:	f53f af67 	bmi.w	800225e <HAL_I2C_Mem_Read+0x19e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	06d1      	lsls	r1, r2, #27
 8002394:	d4e8      	bmi.n	8002368 <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff f989 	bl	80016ac <HAL_GetTick>
 800239a:	e7c1      	b.n	8002320 <HAL_I2C_Mem_Read+0x260>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	0650      	lsls	r0, r2, #25
 80023a0:	d5f6      	bpl.n	8002390 <HAL_I2C_Mem_Read+0x2d0>
 80023a2:	e7dd      	b.n	8002360 <HAL_I2C_Mem_Read+0x2a0>
 80023a4:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80023ae:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b0:	9003      	str	r0, [sp, #12]
 80023b2:	6959      	ldr	r1, [r3, #20]
 80023b4:	9103      	str	r1, [sp, #12]
 80023b6:	6999      	ldr	r1, [r3, #24]
 80023b8:	9103      	str	r1, [sp, #12]
 80023ba:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80023c2:	6019      	str	r1, [r3, #0]
 80023c4:	e6f0      	b.n	80021a8 <HAL_I2C_Mem_Read+0xe8>
 80023c6:	bf00      	nop

080023c8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	2800      	cmp	r0, #0
 80023ca:	f000 81a5 	beq.w	8002718 <HAL_RCC_OscConfig+0x350>
{
 80023ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	6803      	ldr	r3, [r0, #0]
 80023d4:	07dd      	lsls	r5, r3, #31
{
 80023d6:	b082      	sub	sp, #8
 80023d8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	d52f      	bpl.n	800243c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023dc:	49ac      	ldr	r1, [pc, #688]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 80023de:	688a      	ldr	r2, [r1, #8]
 80023e0:	f002 020c 	and.w	r2, r2, #12
 80023e4:	2a04      	cmp	r2, #4
 80023e6:	f000 80ec 	beq.w	80025c2 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ea:	688a      	ldr	r2, [r1, #8]
 80023ec:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f0:	2a08      	cmp	r2, #8
 80023f2:	f000 80e2 	beq.w	80025ba <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f6:	6863      	ldr	r3, [r4, #4]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	f000 80eb 	beq.w	80025d6 <HAL_RCC_OscConfig+0x20e>
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002404:	f000 8178 	beq.w	80026f8 <HAL_RCC_OscConfig+0x330>
 8002408:	4da1      	ldr	r5, [pc, #644]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 800240a:	682a      	ldr	r2, [r5, #0]
 800240c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002410:	602a      	str	r2, [r5, #0]
 8002412:	682a      	ldr	r2, [r5, #0]
 8002414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002418:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 80e0 	bne.w	80025e0 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff f944 	bl	80016ac <HAL_GetTick>
 8002424:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e005      	b.n	8002434 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f940 	bl	80016ac <HAL_GetTick>
 800242c:	1b80      	subs	r0, r0, r6
 800242e:	2864      	cmp	r0, #100	; 0x64
 8002430:	f200 8100 	bhi.w	8002634 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	039b      	lsls	r3, r3, #14
 8002438:	d4f6      	bmi.n	8002428 <HAL_RCC_OscConfig+0x60>
 800243a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243c:	079f      	lsls	r7, r3, #30
 800243e:	d528      	bpl.n	8002492 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002440:	4a93      	ldr	r2, [pc, #588]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 8002442:	6891      	ldr	r1, [r2, #8]
 8002444:	f011 0f0c 	tst.w	r1, #12
 8002448:	f000 8090 	beq.w	800256c <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244c:	6891      	ldr	r1, [r2, #8]
 800244e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002452:	2908      	cmp	r1, #8
 8002454:	f000 8086 	beq.w	8002564 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002458:	68e3      	ldr	r3, [r4, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8106 	beq.w	800266c <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4e8b      	ldr	r6, [pc, #556]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002468:	f7ff f920 	bl	80016ac <HAL_GetTick>
 800246c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	e005      	b.n	800247c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7ff f91c 	bl	80016ac <HAL_GetTick>
 8002474:	1b40      	subs	r0, r0, r5
 8002476:	2802      	cmp	r0, #2
 8002478:	f200 80dc 	bhi.w	8002634 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	6833      	ldr	r3, [r6, #0]
 800247e:	0798      	lsls	r0, r3, #30
 8002480:	d5f6      	bpl.n	8002470 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	6833      	ldr	r3, [r6, #0]
 8002484:	6922      	ldr	r2, [r4, #16]
 8002486:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800248a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800248e:	6033      	str	r3, [r6, #0]
 8002490:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	071a      	lsls	r2, r3, #28
 8002494:	d452      	bmi.n	800253c <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002496:	0758      	lsls	r0, r3, #29
 8002498:	d52f      	bpl.n	80024fa <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4a7d      	ldr	r2, [pc, #500]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 800249c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800249e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80024a2:	d07e      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 80024a4:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4e7c      	ldr	r6, [pc, #496]	; (8002698 <HAL_RCC_OscConfig+0x2d0>)
 80024a8:	6833      	ldr	r3, [r6, #0]
 80024aa:	05d9      	lsls	r1, r3, #23
 80024ac:	f140 80b2 	bpl.w	8002614 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	f000 80c2 	beq.w	800263c <HAL_RCC_OscConfig+0x274>
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	f000 812f 	beq.w	800271c <HAL_RCC_OscConfig+0x354>
 80024be:	4e74      	ldr	r6, [pc, #464]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 80024c0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	6732      	str	r2, [r6, #112]	; 0x70
 80024c8:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80024ca:	f022 0204 	bic.w	r2, r2, #4
 80024ce:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 80b8 	bne.w	8002646 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff f8e9 	bl	80016ac <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e005      	b.n	80024ee <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff f8e3 	bl	80016ac <HAL_GetTick>
 80024e6:	1bc0      	subs	r0, r0, r7
 80024e8:	4540      	cmp	r0, r8
 80024ea:	f200 80a3 	bhi.w	8002634 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80024f0:	0798      	lsls	r0, r3, #30
 80024f2:	d4f6      	bmi.n	80024e2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f4:	2d00      	cmp	r5, #0
 80024f6:	f040 8109 	bne.w	800270c <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	69a0      	ldr	r0, [r4, #24]
 80024fc:	b1d0      	cbz	r0, 8002534 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fe:	4d64      	ldr	r5, [pc, #400]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 8002500:	68ab      	ldr	r3, [r5, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	f000 80cc 	beq.w	80026a4 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_OscConfig+0x2d4>)
 800250e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002512:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	f000 810c 	beq.w	8002730 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff f8c8 	bl	80016ac <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251c:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800251e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002520:	e005      	b.n	800252e <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002522:	f7ff f8c3 	bl	80016ac <HAL_GetTick>
 8002526:	1b40      	subs	r0, r0, r5
 8002528:	2802      	cmp	r0, #2
 800252a:	f200 8083 	bhi.w	8002634 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	d4f6      	bmi.n	8002522 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002534:	2000      	movs	r0, #0
}
 8002536:	b002      	add	sp, #8
 8002538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253c:	6963      	ldr	r3, [r4, #20]
 800253e:	b303      	cbz	r3, 8002582 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002540:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	4e53      	ldr	r6, [pc, #332]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002548:	f7ff f8b0 	bl	80016ac <HAL_GetTick>
 800254c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	e004      	b.n	800255a <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002550:	f7ff f8ac 	bl	80016ac <HAL_GetTick>
 8002554:	1b40      	subs	r0, r0, r5
 8002556:	2802      	cmp	r0, #2
 8002558:	d86c      	bhi.n	8002634 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800255c:	079b      	lsls	r3, r3, #30
 800255e:	d5f7      	bpl.n	8002550 <HAL_RCC_OscConfig+0x188>
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	e798      	b.n	8002496 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002564:	6852      	ldr	r2, [r2, #4]
 8002566:	0256      	lsls	r6, r2, #9
 8002568:	f53f af76 	bmi.w	8002458 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256c:	4a48      	ldr	r2, [pc, #288]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	0795      	lsls	r5, r2, #30
 8002572:	d543      	bpl.n	80025fc <HAL_RCC_OscConfig+0x234>
 8002574:	68e2      	ldr	r2, [r4, #12]
 8002576:	2a01      	cmp	r2, #1
 8002578:	d040      	beq.n	80025fc <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 800257a:	2001      	movs	r0, #1
}
 800257c:	b002      	add	sp, #8
 800257e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002582:	4a47      	ldr	r2, [pc, #284]	; (80026a0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4e42      	ldr	r6, [pc, #264]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8002586:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002588:	f7ff f890 	bl	80016ac <HAL_GetTick>
 800258c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258e:	e004      	b.n	800259a <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002590:	f7ff f88c 	bl	80016ac <HAL_GetTick>
 8002594:	1b40      	subs	r0, r0, r5
 8002596:	2802      	cmp	r0, #2
 8002598:	d84c      	bhi.n	8002634 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800259c:	079f      	lsls	r7, r3, #30
 800259e:	d4f7      	bmi.n	8002590 <HAL_RCC_OscConfig+0x1c8>
 80025a0:	e7de      	b.n	8002560 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025b6:	2501      	movs	r5, #1
 80025b8:	e775      	b.n	80024a6 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	684a      	ldr	r2, [r1, #4]
 80025bc:	0250      	lsls	r0, r2, #9
 80025be:	f57f af1a 	bpl.w	80023f6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4a33      	ldr	r2, [pc, #204]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	0391      	lsls	r1, r2, #14
 80025c8:	f57f af38 	bpl.w	800243c <HAL_RCC_OscConfig+0x74>
 80025cc:	6862      	ldr	r2, [r4, #4]
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	f47f af34 	bne.w	800243c <HAL_RCC_OscConfig+0x74>
 80025d4:	e7d1      	b.n	800257a <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d6:	4a2e      	ldr	r2, [pc, #184]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 80025d8:	6813      	ldr	r3, [r2, #0]
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025e0:	f7ff f864 	bl	80016ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e4:	4e2a      	ldr	r6, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80025e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e8:	e004      	b.n	80025f4 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ea:	f7ff f85f 	bl	80016ac <HAL_GetTick>
 80025ee:	1b40      	subs	r0, r0, r5
 80025f0:	2864      	cmp	r0, #100	; 0x64
 80025f2:	d81f      	bhi.n	8002634 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f4:	6833      	ldr	r3, [r6, #0]
 80025f6:	039a      	lsls	r2, r3, #14
 80025f8:	d5f7      	bpl.n	80025ea <HAL_RCC_OscConfig+0x222>
 80025fa:	e71e      	b.n	800243a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4924      	ldr	r1, [pc, #144]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 80025fe:	6920      	ldr	r0, [r4, #16]
 8002600:	680a      	ldr	r2, [r1, #0]
 8002602:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002606:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800260a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260c:	071a      	lsls	r2, r3, #28
 800260e:	f57f af42 	bpl.w	8002496 <HAL_RCC_OscConfig+0xce>
 8002612:	e793      	b.n	800253c <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002614:	6833      	ldr	r3, [r6, #0]
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800261c:	f7ff f846 	bl	80016ac <HAL_GetTick>
 8002620:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	6833      	ldr	r3, [r6, #0]
 8002624:	05da      	lsls	r2, r3, #23
 8002626:	f53f af43 	bmi.w	80024b0 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7ff f83f 	bl	80016ac <HAL_GetTick>
 800262e:	1bc0      	subs	r0, r0, r7
 8002630:	2802      	cmp	r0, #2
 8002632:	d9f6      	bls.n	8002622 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002634:	2003      	movs	r0, #3
}
 8002636:	b002      	add	sp, #8
 8002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
 800263e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002646:	f7ff f831 	bl	80016ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264a:	4f11      	ldr	r7, [pc, #68]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800264c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	e004      	b.n	800265e <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7ff f82a 	bl	80016ac <HAL_GetTick>
 8002658:	1b80      	subs	r0, r0, r6
 800265a:	4540      	cmp	r0, r8
 800265c:	d8ea      	bhi.n	8002634 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002660:	079b      	lsls	r3, r3, #30
 8002662:	d5f7      	bpl.n	8002654 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8002664:	2d00      	cmp	r5, #0
 8002666:	f43f af48 	beq.w	80024fa <HAL_RCC_OscConfig+0x132>
 800266a:	e04f      	b.n	800270c <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 800266c:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4e08      	ldr	r6, [pc, #32]	; (8002690 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8002670:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002672:	f7ff f81b 	bl	80016ac <HAL_GetTick>
 8002676:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002678:	e004      	b.n	8002684 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7ff f817 	bl	80016ac <HAL_GetTick>
 800267e:	1b40      	subs	r0, r0, r5
 8002680:	2802      	cmp	r0, #2
 8002682:	d8d7      	bhi.n	8002634 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002684:	6833      	ldr	r3, [r6, #0]
 8002686:	0799      	lsls	r1, r3, #30
 8002688:	d4f7      	bmi.n	800267a <HAL_RCC_OscConfig+0x2b2>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	e701      	b.n	8002492 <HAL_RCC_OscConfig+0xca>
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	42470000 	.word	0x42470000
 8002698:	40007000 	.word	0x40007000
 800269c:	42470060 	.word	0x42470060
 80026a0:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a4:	2801      	cmp	r0, #1
 80026a6:	f43f af46 	beq.w	8002536 <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 80026aa:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ac:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	4291      	cmp	r1, r2
 80026b4:	f47f af61 	bne.w	800257a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b8:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ba:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	4291      	cmp	r1, r2
 80026c0:	f47f af5b 	bne.w	800257a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026c6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80026ca:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026cc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80026d0:	f47f af53 	bne.w	800257a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80026d6:	0852      	lsrs	r2, r2, #1
 80026d8:	3a01      	subs	r2, #1
 80026da:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026de:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80026e2:	f47f af4a 	bne.w	800257a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ec:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 80026f0:	bf14      	ite	ne
 80026f2:	2001      	movne	r0, #1
 80026f4:	2000      	moveq	r0, #0
 80026f6:	e71e      	b.n	8002536 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_OscConfig+0x3c4>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002708:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270a:	e769      	b.n	80025e0 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4a1f      	ldr	r2, [pc, #124]	; (800278c <HAL_RCC_OscConfig+0x3c4>)
 800270e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	e6f0      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002718:	2001      	movs	r0, #1
}
 800271a:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x3c4>)
 800271e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002720:	f042 0204 	orr.w	r2, r2, #4
 8002724:	671a      	str	r2, [r3, #112]	; 0x70
 8002726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800272e:	e78a      	b.n	8002646 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002730:	f7fe ffbc 	bl	80016ac <HAL_GetTick>
 8002734:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e005      	b.n	8002744 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe ffb8 	bl	80016ac <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	2802      	cmp	r0, #2
 8002740:	f63f af78 	bhi.w	8002634 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	0199      	lsls	r1, r3, #6
 8002748:	d4f6      	bmi.n	8002738 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274a:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800274e:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8002752:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002754:	4333      	orrs	r3, r6
 8002756:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002760:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002762:	490b      	ldr	r1, [pc, #44]	; (8002790 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4e09      	ldr	r6, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800276a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800276c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800276e:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002770:	f7fe ff9c 	bl	80016ac <HAL_GetTick>
 8002774:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	e005      	b.n	8002784 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe ff98 	bl	80016ac <HAL_GetTick>
 800277c:	1b00      	subs	r0, r0, r4
 800277e:	2802      	cmp	r0, #2
 8002780:	f63f af58 	bhi.w	8002634 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002784:	6833      	ldr	r3, [r6, #0]
 8002786:	019a      	lsls	r2, r3, #6
 8002788:	d5f6      	bpl.n	8002778 <HAL_RCC_OscConfig+0x3b0>
 800278a:	e6d3      	b.n	8002534 <HAL_RCC_OscConfig+0x16c>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470060 	.word	0x42470060

08002794 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002794:	4917      	ldr	r1, [pc, #92]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8002796:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002798:	688b      	ldr	r3, [r1, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d01b      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x46>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d117      	bne.n	80027d6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a8:	684b      	ldr	r3, [r1, #4]
 80027aa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b2:	d114      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b4:	6849      	ldr	r1, [r1, #4]
 80027b6:	4810      	ldr	r0, [pc, #64]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x64>)
 80027b8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80027bc:	fba1 0100 	umull	r0, r1, r1, r0
 80027c0:	f7fe f950 	bl	8000a64 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x60>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80027cc:	3301      	adds	r3, #1
 80027ce:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80027d0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80027d4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80027d6:	4808      	ldr	r0, [pc, #32]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80027d8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027da:	4808      	ldr	r0, [pc, #32]	; (80027fc <HAL_RCC_GetSysClockFreq+0x68>)
}
 80027dc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027de:	684b      	ldr	r3, [r1, #4]
 80027e0:	4806      	ldr	r0, [pc, #24]	; (80027fc <HAL_RCC_GetSysClockFreq+0x68>)
 80027e2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80027e6:	fba3 0100 	umull	r0, r1, r3, r0
 80027ea:	2300      	movs	r3, #0
 80027ec:	f7fe f93a 	bl	8000a64 <__aeabi_uldivmod>
 80027f0:	e7e8      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x30>
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	017d7840 	.word	0x017d7840

08002800 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002800:	2800      	cmp	r0, #0
 8002802:	f000 8087 	beq.w	8002914 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002806:	4a48      	ldr	r2, [pc, #288]	; (8002928 <HAL_RCC_ClockConfig+0x128>)
 8002808:	6813      	ldr	r3, [r2, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	428b      	cmp	r3, r1
{
 8002810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002814:	460d      	mov	r5, r1
 8002816:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	d209      	bcs.n	800282e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	b2cb      	uxtb	r3, r1
 800281c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	6813      	ldr	r3, [r2, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	428b      	cmp	r3, r1
 8002826:	d002      	beq.n	800282e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
}
 800282a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	0798      	lsls	r0, r3, #30
 8002832:	d514      	bpl.n	800285e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	0759      	lsls	r1, r3, #29
 8002836:	d504      	bpl.n	8002842 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	493c      	ldr	r1, [pc, #240]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 800283a:	688a      	ldr	r2, [r1, #8]
 800283c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002840:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	071a      	lsls	r2, r3, #28
 8002844:	d504      	bpl.n	8002850 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002846:	4939      	ldr	r1, [pc, #228]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 8002848:	688a      	ldr	r2, [r1, #8]
 800284a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800284e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4936      	ldr	r1, [pc, #216]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 8002852:	68a0      	ldr	r0, [r4, #8]
 8002854:	688a      	ldr	r2, [r1, #8]
 8002856:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800285a:	4302      	orrs	r2, r0
 800285c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	07df      	lsls	r7, r3, #31
 8002860:	d521      	bpl.n	80028a6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002862:	6862      	ldr	r2, [r4, #4]
 8002864:	2a01      	cmp	r2, #1
 8002866:	d057      	beq.n	8002918 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002868:	1e93      	subs	r3, r2, #2
 800286a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286c:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 800286e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002870:	d94d      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	0799      	lsls	r1, r3, #30
 8002874:	d5d8      	bpl.n	8002828 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	4e2d      	ldr	r6, [pc, #180]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 8002878:	68b3      	ldr	r3, [r6, #8]
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	4313      	orrs	r3, r2
 8002880:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002882:	f7fe ff13 	bl	80016ac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002886:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800288a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288c:	e004      	b.n	8002898 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288e:	f7fe ff0d 	bl	80016ac <HAL_GetTick>
 8002892:	1bc0      	subs	r0, r0, r7
 8002894:	4540      	cmp	r0, r8
 8002896:	d844      	bhi.n	8002922 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002898:	68b3      	ldr	r3, [r6, #8]
 800289a:	6862      	ldr	r2, [r4, #4]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028a4:	d1f3      	bne.n	800288e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a6:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_RCC_ClockConfig+0x128>)
 80028a8:	6813      	ldr	r3, [r2, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	42ab      	cmp	r3, r5
 80028b0:	d906      	bls.n	80028c0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	b2eb      	uxtb	r3, r5
 80028b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	6813      	ldr	r3, [r2, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	42ab      	cmp	r3, r5
 80028be:	d1b3      	bne.n	8002828 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	075a      	lsls	r2, r3, #29
 80028c4:	d506      	bpl.n	80028d4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c6:	4919      	ldr	r1, [pc, #100]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 80028c8:	68e0      	ldr	r0, [r4, #12]
 80028ca:	688a      	ldr	r2, [r1, #8]
 80028cc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80028d0:	4302      	orrs	r2, r0
 80028d2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	071b      	lsls	r3, r3, #28
 80028d6:	d507      	bpl.n	80028e8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 80028da:	6921      	ldr	r1, [r4, #16]
 80028dc:	6893      	ldr	r3, [r2, #8]
 80028de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028e8:	f7ff ff54 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 80028ec:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 80028ee:	4c10      	ldr	r4, [pc, #64]	; (8002930 <HAL_RCC_ClockConfig+0x130>)
 80028f0:	6892      	ldr	r2, [r2, #8]
 80028f2:	4910      	ldr	r1, [pc, #64]	; (8002934 <HAL_RCC_ClockConfig+0x134>)
 80028f4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80028f8:	4603      	mov	r3, r0
 80028fa:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80028fc:	480e      	ldr	r0, [pc, #56]	; (8002938 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fe:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002900:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002902:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002904:	f7fe fe88 	bl	8001618 <HAL_InitTick>
  return HAL_OK;
 8002908:	2000      	movs	r0, #0
}
 800290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	0198      	lsls	r0, r3, #6
 8002910:	d4b1      	bmi.n	8002876 <HAL_RCC_ClockConfig+0x76>
 8002912:	e789      	b.n	8002828 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002914:	2001      	movs	r0, #1
}
 8002916:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_RCC_ClockConfig+0x12c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	039e      	lsls	r6, r3, #14
 800291e:	d4aa      	bmi.n	8002876 <HAL_RCC_ClockConfig+0x76>
 8002920:	e782      	b.n	8002828 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
 8002924:	e781      	b.n	800282a <HAL_RCC_ClockConfig+0x2a>
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00
 800292c:	40023800 	.word	0x40023800
 8002930:	08003250 	.word	0x08003250
 8002934:	20000000 	.word	0x20000000
 8002938:	20000008 	.word	0x20000008

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x14>)
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002940:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002942:	4905      	ldr	r1, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002944:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002948:	6808      	ldr	r0, [r1, #0]
 800294a:	5cd3      	ldrb	r3, [r2, r3]
}
 800294c:	40d8      	lsrs	r0, r3
 800294e:	4770      	bx	lr
 8002950:	40023800 	.word	0x40023800
 8002954:	08003260 	.word	0x08003260
 8002958:	20000000 	.word	0x20000000

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000000c 	.word	0x2000000c

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4d0d      	ldr	r5, [pc, #52]	; (80029a0 <__libc_init_array+0x38>)
 800296c:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 800296e:	1b64      	subs	r4, r4, r5
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	2600      	movs	r6, #0
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	4d0b      	ldr	r5, [pc, #44]	; (80029a8 <__libc_init_array+0x40>)
 800297a:	4c0c      	ldr	r4, [pc, #48]	; (80029ac <__libc_init_array+0x44>)
 800297c:	f000 fc5c 	bl	8003238 <_init>
 8002980:	1b64      	subs	r4, r4, r5
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	2600      	movs	r6, #0
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08003294 	.word	0x08003294
 80029a4:	08003294 	.word	0x08003294
 80029a8:	08003294 	.word	0x08003294
 80029ac:	08003298 	.word	0x08003298

080029b0 <powf>:
 80029b0:	b508      	push	{r3, lr}
 80029b2:	ed2d 8b04 	vpush	{d8-d9}
 80029b6:	eeb0 9a40 	vmov.f32	s18, s0
 80029ba:	eef0 8a60 	vmov.f32	s17, s1
 80029be:	f000 f88f 	bl	8002ae0 <__ieee754_powf>
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <powf+0x120>)
 80029c4:	f993 3000 	ldrsb.w	r3, [r3]
 80029c8:	3301      	adds	r3, #1
 80029ca:	eeb0 8a40 	vmov.f32	s16, s0
 80029ce:	d012      	beq.n	80029f6 <powf+0x46>
 80029d0:	eef4 8a68 	vcmp.f32	s17, s17
 80029d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d8:	d60d      	bvs.n	80029f6 <powf+0x46>
 80029da:	eeb4 9a49 	vcmp.f32	s18, s18
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	d70d      	bvc.n	8002a00 <powf+0x50>
 80029e4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80029e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80029f0:	bf08      	it	eq
 80029f2:	eeb0 8a67 	vmoveq.f32	s16, s15
 80029f6:	eeb0 0a48 	vmov.f32	s0, s16
 80029fa:	ecbd 8b04 	vpop	{d8-d9}
 80029fe:	bd08      	pop	{r3, pc}
 8002a00:	eddf 9a34 	vldr	s19, [pc, #208]	; 8002ad4 <powf+0x124>
 8002a04:	eeb4 9a69 	vcmp.f32	s18, s19
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	d116      	bne.n	8002a3c <powf+0x8c>
 8002a0e:	eef4 8a69 	vcmp.f32	s17, s19
 8002a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a16:	d057      	beq.n	8002ac8 <powf+0x118>
 8002a18:	eeb0 0a68 	vmov.f32	s0, s17
 8002a1c:	f000 fb2a 	bl	8003074 <finitef>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d0e8      	beq.n	80029f6 <powf+0x46>
 8002a24:	eef4 8ae9 	vcmpe.f32	s17, s19
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	d5e3      	bpl.n	80029f6 <powf+0x46>
 8002a2e:	f7ff ff95 	bl	800295c <__errno>
 8002a32:	2321      	movs	r3, #33	; 0x21
 8002a34:	6003      	str	r3, [r0, #0]
 8002a36:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8002ad8 <powf+0x128>
 8002a3a:	e7dc      	b.n	80029f6 <powf+0x46>
 8002a3c:	f000 fb1a 	bl	8003074 <finitef>
 8002a40:	bb50      	cbnz	r0, 8002a98 <powf+0xe8>
 8002a42:	eeb0 0a49 	vmov.f32	s0, s18
 8002a46:	f000 fb15 	bl	8003074 <finitef>
 8002a4a:	b328      	cbz	r0, 8002a98 <powf+0xe8>
 8002a4c:	eeb0 0a68 	vmov.f32	s0, s17
 8002a50:	f000 fb10 	bl	8003074 <finitef>
 8002a54:	b300      	cbz	r0, 8002a98 <powf+0xe8>
 8002a56:	eeb4 8a48 	vcmp.f32	s16, s16
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	d706      	bvc.n	8002a6e <powf+0xbe>
 8002a60:	f7ff ff7c 	bl	800295c <__errno>
 8002a64:	2321      	movs	r3, #33	; 0x21
 8002a66:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8002a6a:	6003      	str	r3, [r0, #0]
 8002a6c:	e7c3      	b.n	80029f6 <powf+0x46>
 8002a6e:	f7ff ff75 	bl	800295c <__errno>
 8002a72:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8002a76:	2322      	movs	r3, #34	; 0x22
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	6003      	str	r3, [r0, #0]
 8002a7e:	d508      	bpl.n	8002a92 <powf+0xe2>
 8002a80:	eeb0 0a68 	vmov.f32	s0, s17
 8002a84:	f000 fb0a 	bl	800309c <rintf>
 8002a88:	eeb4 0a68 	vcmp.f32	s0, s17
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	d1d1      	bne.n	8002a36 <powf+0x86>
 8002a92:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8002adc <powf+0x12c>
 8002a96:	e7ae      	b.n	80029f6 <powf+0x46>
 8002a98:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa0:	d1a9      	bne.n	80029f6 <powf+0x46>
 8002aa2:	eeb0 0a49 	vmov.f32	s0, s18
 8002aa6:	f000 fae5 	bl	8003074 <finitef>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d0a3      	beq.n	80029f6 <powf+0x46>
 8002aae:	eeb0 0a68 	vmov.f32	s0, s17
 8002ab2:	f000 fadf 	bl	8003074 <finitef>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d09d      	beq.n	80029f6 <powf+0x46>
 8002aba:	f7ff ff4f 	bl	800295c <__errno>
 8002abe:	2322      	movs	r3, #34	; 0x22
 8002ac0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8002ad4 <powf+0x124>
 8002ac4:	6003      	str	r3, [r0, #0]
 8002ac6:	e796      	b.n	80029f6 <powf+0x46>
 8002ac8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002acc:	e793      	b.n	80029f6 <powf+0x46>
 8002ace:	bf00      	nop
 8002ad0:	20000070 	.word	0x20000070
 8002ad4:	00000000 	.word	0x00000000
 8002ad8:	ff800000 	.word	0xff800000
 8002adc:	7f800000 	.word	0x7f800000

08002ae0 <__ieee754_powf>:
 8002ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae4:	ee10 5a90 	vmov	r5, s1
 8002ae8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8002aec:	ed2d 8b02 	vpush	{d8}
 8002af0:	eeb0 8a40 	vmov.f32	s16, s0
 8002af4:	eef0 8a60 	vmov.f32	s17, s1
 8002af8:	f000 8291 	beq.w	800301e <__ieee754_powf+0x53e>
 8002afc:	ee10 8a10 	vmov	r8, s0
 8002b00:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8002b04:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002b08:	dc06      	bgt.n	8002b18 <__ieee754_powf+0x38>
 8002b0a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002b0e:	dd0a      	ble.n	8002b26 <__ieee754_powf+0x46>
 8002b10:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002b14:	f000 8283 	beq.w	800301e <__ieee754_powf+0x53e>
 8002b18:	ecbd 8b02 	vpop	{d8}
 8002b1c:	48d8      	ldr	r0, [pc, #864]	; (8002e80 <__ieee754_powf+0x3a0>)
 8002b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b22:	f000 bab5 	b.w	8003090 <nanf>
 8002b26:	f1b8 0f00 	cmp.w	r8, #0
 8002b2a:	da1f      	bge.n	8002b6c <__ieee754_powf+0x8c>
 8002b2c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8002b30:	da2e      	bge.n	8002b90 <__ieee754_powf+0xb0>
 8002b32:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002b36:	f2c0 827b 	blt.w	8003030 <__ieee754_powf+0x550>
 8002b3a:	15fb      	asrs	r3, r7, #23
 8002b3c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002b40:	fa47 f603 	asr.w	r6, r7, r3
 8002b44:	fa06 f303 	lsl.w	r3, r6, r3
 8002b48:	42bb      	cmp	r3, r7
 8002b4a:	f040 8271 	bne.w	8003030 <__ieee754_powf+0x550>
 8002b4e:	f006 0601 	and.w	r6, r6, #1
 8002b52:	f1c6 0602 	rsb	r6, r6, #2
 8002b56:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002b5a:	d120      	bne.n	8002b9e <__ieee754_powf+0xbe>
 8002b5c:	2d00      	cmp	r5, #0
 8002b5e:	f280 8264 	bge.w	800302a <__ieee754_powf+0x54a>
 8002b62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b66:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8002b6a:	e00d      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002b6c:	2600      	movs	r6, #0
 8002b6e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002b72:	d1f0      	bne.n	8002b56 <__ieee754_powf+0x76>
 8002b74:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002b78:	f000 8251 	beq.w	800301e <__ieee754_powf+0x53e>
 8002b7c:	dd0a      	ble.n	8002b94 <__ieee754_powf+0xb4>
 8002b7e:	2d00      	cmp	r5, #0
 8002b80:	f280 8250 	bge.w	8003024 <__ieee754_powf+0x544>
 8002b84:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8002e84 <__ieee754_powf+0x3a4>
 8002b88:	ecbd 8b02 	vpop	{d8}
 8002b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b90:	2602      	movs	r6, #2
 8002b92:	e7ec      	b.n	8002b6e <__ieee754_powf+0x8e>
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	daf5      	bge.n	8002b84 <__ieee754_powf+0xa4>
 8002b98:	eeb1 0a68 	vneg.f32	s0, s17
 8002b9c:	e7f4      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002b9e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8002ba2:	d102      	bne.n	8002baa <__ieee754_powf+0xca>
 8002ba4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002ba8:	e7ee      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002baa:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8002bae:	eeb0 0a48 	vmov.f32	s0, s16
 8002bb2:	d108      	bne.n	8002bc6 <__ieee754_powf+0xe6>
 8002bb4:	f1b8 0f00 	cmp.w	r8, #0
 8002bb8:	db05      	blt.n	8002bc6 <__ieee754_powf+0xe6>
 8002bba:	ecbd 8b02 	vpop	{d8}
 8002bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc2:	f000 ba4d 	b.w	8003060 <__ieee754_sqrtf>
 8002bc6:	f000 fa4e 	bl	8003066 <fabsf>
 8002bca:	b124      	cbz	r4, 8002bd6 <__ieee754_powf+0xf6>
 8002bcc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8002bd0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8002bd4:	d117      	bne.n	8002c06 <__ieee754_powf+0x126>
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	bfbc      	itt	lt
 8002bda:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8002bde:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002be2:	f1b8 0f00 	cmp.w	r8, #0
 8002be6:	dacf      	bge.n	8002b88 <__ieee754_powf+0xa8>
 8002be8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8002bec:	ea54 0306 	orrs.w	r3, r4, r6
 8002bf0:	d104      	bne.n	8002bfc <__ieee754_powf+0x11c>
 8002bf2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002bf6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002bfa:	e7c5      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002bfc:	2e01      	cmp	r6, #1
 8002bfe:	d1c3      	bne.n	8002b88 <__ieee754_powf+0xa8>
 8002c00:	eeb1 0a40 	vneg.f32	s0, s0
 8002c04:	e7c0      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002c06:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8002c0a:	3801      	subs	r0, #1
 8002c0c:	ea56 0300 	orrs.w	r3, r6, r0
 8002c10:	d104      	bne.n	8002c1c <__ieee754_powf+0x13c>
 8002c12:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002c16:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002c1a:	e7b5      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002c1c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8002c20:	dd6b      	ble.n	8002cfa <__ieee754_powf+0x21a>
 8002c22:	4b99      	ldr	r3, [pc, #612]	; (8002e88 <__ieee754_powf+0x3a8>)
 8002c24:	429c      	cmp	r4, r3
 8002c26:	dc06      	bgt.n	8002c36 <__ieee754_powf+0x156>
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	daab      	bge.n	8002b84 <__ieee754_powf+0xa4>
 8002c2c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8002e8c <__ieee754_powf+0x3ac>
 8002c30:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002c34:	e7a8      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002c36:	4b96      	ldr	r3, [pc, #600]	; (8002e90 <__ieee754_powf+0x3b0>)
 8002c38:	429c      	cmp	r4, r3
 8002c3a:	dd02      	ble.n	8002c42 <__ieee754_powf+0x162>
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	dcf5      	bgt.n	8002c2c <__ieee754_powf+0x14c>
 8002c40:	e7a0      	b.n	8002b84 <__ieee754_powf+0xa4>
 8002c42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002c46:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002c4a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8002e94 <__ieee754_powf+0x3b4>
 8002c4e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002c52:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002c56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c5a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002c5e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c66:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002e98 <__ieee754_powf+0x3b8>
 8002c6a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8002c6e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002e9c <__ieee754_powf+0x3bc>
 8002c72:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002c76:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002ea0 <__ieee754_powf+0x3c0>
 8002c7a:	eef0 6a67 	vmov.f32	s13, s15
 8002c7e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8002c82:	ee16 3a90 	vmov	r3, s13
 8002c86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c8a:	f023 030f 	bic.w	r3, r3, #15
 8002c8e:	ee00 3a90 	vmov	s1, r3
 8002c92:	eee0 0a47 	vfms.f32	s1, s0, s14
 8002c96:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002c9a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8002c9e:	f025 050f 	bic.w	r5, r5, #15
 8002ca2:	ee07 5a10 	vmov	s14, r5
 8002ca6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8002caa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8002cb6:	3e01      	subs	r6, #1
 8002cb8:	ea56 0200 	orrs.w	r2, r6, r0
 8002cbc:	ee07 5a10 	vmov	s14, r5
 8002cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002cc8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8002ccc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002cd0:	ee17 4a10 	vmov	r4, s14
 8002cd4:	bf08      	it	eq
 8002cd6:	eeb0 8a40 	vmoveq.f32	s16, s0
 8002cda:	2c00      	cmp	r4, #0
 8002cdc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002ce0:	f340 8184 	ble.w	8002fec <__ieee754_powf+0x50c>
 8002ce4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8002ce8:	f340 80fc 	ble.w	8002ee4 <__ieee754_powf+0x404>
 8002cec:	eddf 7a67 	vldr	s15, [pc, #412]	; 8002e8c <__ieee754_powf+0x3ac>
 8002cf0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8002cf4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002cf8:	e746      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002cfa:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8002cfe:	bf01      	itttt	eq
 8002d00:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8002ea4 <__ieee754_powf+0x3c4>
 8002d04:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8002d08:	f06f 0217 	mvneq.w	r2, #23
 8002d0c:	ee17 4a90 	vmoveq	r4, s15
 8002d10:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8002d14:	bf18      	it	ne
 8002d16:	2200      	movne	r2, #0
 8002d18:	3b7f      	subs	r3, #127	; 0x7f
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a62      	ldr	r2, [pc, #392]	; (8002ea8 <__ieee754_powf+0x3c8>)
 8002d1e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8002d22:	4294      	cmp	r4, r2
 8002d24:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8002d28:	dd06      	ble.n	8002d38 <__ieee754_powf+0x258>
 8002d2a:	4a60      	ldr	r2, [pc, #384]	; (8002eac <__ieee754_powf+0x3cc>)
 8002d2c:	4294      	cmp	r4, r2
 8002d2e:	f340 80a4 	ble.w	8002e7a <__ieee754_powf+0x39a>
 8002d32:	3301      	adds	r3, #1
 8002d34:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8002d38:	2400      	movs	r4, #0
 8002d3a:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <__ieee754_powf+0x3d0>)
 8002d3c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8002d40:	ee07 1a90 	vmov	s15, r1
 8002d44:	ed92 7a00 	vldr	s14, [r2]
 8002d48:	4a5a      	ldr	r2, [pc, #360]	; (8002eb4 <__ieee754_powf+0x3d4>)
 8002d4a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002d4e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002d52:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8002d56:	1049      	asrs	r1, r1, #1
 8002d58:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8002d5c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8002d60:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8002d64:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8002d68:	ee06 1a10 	vmov	s12, r1
 8002d6c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8002d70:	ee36 7a47 	vsub.f32	s14, s12, s14
 8002d74:	ee14 7a90 	vmov	r7, s9
 8002d78:	4017      	ands	r7, r2
 8002d7a:	ee05 7a90 	vmov	s11, r7
 8002d7e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8002d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d86:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002eb8 <__ieee754_powf+0x3d8>
 8002d8a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8002d8e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8002d92:	ee25 6a26 	vmul.f32	s12, s10, s13
 8002d96:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002ebc <__ieee754_powf+0x3dc>
 8002d9a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002d9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ec0 <__ieee754_powf+0x3e0>
 8002da2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002da6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002e94 <__ieee754_powf+0x3b4>
 8002daa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002dae:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002ec4 <__ieee754_powf+0x3e4>
 8002db2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002db6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002ec8 <__ieee754_powf+0x3e8>
 8002dba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002dbe:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8002dc2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8002dc6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002dca:	eee5 6a07 	vfma.f32	s13, s10, s14
 8002dce:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8002dd2:	eef0 7a45 	vmov.f32	s15, s10
 8002dd6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8002dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dde:	ee17 1a90 	vmov	r1, s15
 8002de2:	4011      	ands	r1, r2
 8002de4:	ee07 1a90 	vmov	s15, r1
 8002de8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8002dec:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8002df0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002df4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8002df8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8002dfc:	eeb0 6a47 	vmov.f32	s12, s14
 8002e00:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8002e04:	ee16 1a10 	vmov	r1, s12
 8002e08:	4011      	ands	r1, r2
 8002e0a:	ee06 1a90 	vmov	s13, r1
 8002e0e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8002e12:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8002ecc <__ieee754_powf+0x3ec>
 8002e16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ed0 <__ieee754_powf+0x3f0>
 8002e1a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002e1e:	ee06 1a10 	vmov	s12, r1
 8002e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e26:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8002ed4 <__ieee754_powf+0x3f4>
 8002e2a:	492b      	ldr	r1, [pc, #172]	; (8002ed8 <__ieee754_powf+0x3f8>)
 8002e2c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8002e30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002e34:	edd1 7a00 	vldr	s15, [r1]
 8002e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <__ieee754_powf+0x3fc>)
 8002e42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e46:	eef0 7a47 	vmov.f32	s15, s14
 8002e4a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002e4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002e52:	edd4 0a00 	vldr	s1, [r4]
 8002e56:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8002e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5e:	ee17 3a90 	vmov	r3, s15
 8002e62:	4013      	ands	r3, r2
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e6c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8002e70:	eee6 6a65 	vfms.f32	s13, s12, s11
 8002e74:	ee77 7a66 	vsub.f32	s15, s14, s13
 8002e78:	e70f      	b.n	8002c9a <__ieee754_powf+0x1ba>
 8002e7a:	2401      	movs	r4, #1
 8002e7c:	e75d      	b.n	8002d3a <__ieee754_powf+0x25a>
 8002e7e:	bf00      	nop
 8002e80:	08003268 	.word	0x08003268
 8002e84:	00000000 	.word	0x00000000
 8002e88:	3f7ffff7 	.word	0x3f7ffff7
 8002e8c:	7149f2ca 	.word	0x7149f2ca
 8002e90:	3f800007 	.word	0x3f800007
 8002e94:	3eaaaaab 	.word	0x3eaaaaab
 8002e98:	3fb8aa3b 	.word	0x3fb8aa3b
 8002e9c:	36eca570 	.word	0x36eca570
 8002ea0:	3fb8aa00 	.word	0x3fb8aa00
 8002ea4:	4b800000 	.word	0x4b800000
 8002ea8:	001cc471 	.word	0x001cc471
 8002eac:	005db3d6 	.word	0x005db3d6
 8002eb0:	0800326c 	.word	0x0800326c
 8002eb4:	fffff000 	.word	0xfffff000
 8002eb8:	3e6c3255 	.word	0x3e6c3255
 8002ebc:	3e53f142 	.word	0x3e53f142
 8002ec0:	3e8ba305 	.word	0x3e8ba305
 8002ec4:	3edb6db7 	.word	0x3edb6db7
 8002ec8:	3f19999a 	.word	0x3f19999a
 8002ecc:	3f76384f 	.word	0x3f76384f
 8002ed0:	3f763800 	.word	0x3f763800
 8002ed4:	369dc3a0 	.word	0x369dc3a0
 8002ed8:	0800327c 	.word	0x0800327c
 8002edc:	08003274 	.word	0x08003274
 8002ee0:	3338aa3c 	.word	0x3338aa3c
 8002ee4:	f040 8092 	bne.w	800300c <__ieee754_powf+0x52c>
 8002ee8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002ee0 <__ieee754_powf+0x400>
 8002eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ef0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8002ef4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	f73f aef6 	bgt.w	8002cec <__ieee754_powf+0x20c>
 8002f00:	15db      	asrs	r3, r3, #23
 8002f02:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8002f06:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002f0a:	4103      	asrs	r3, r0
 8002f0c:	4423      	add	r3, r4
 8002f0e:	4949      	ldr	r1, [pc, #292]	; (8003034 <__ieee754_powf+0x554>)
 8002f10:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002f14:	3a7f      	subs	r2, #127	; 0x7f
 8002f16:	4111      	asrs	r1, r2
 8002f18:	ea23 0101 	bic.w	r1, r3, r1
 8002f1c:	ee07 1a10 	vmov	s14, r1
 8002f20:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8002f24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002f28:	f1c2 0217 	rsb	r2, r2, #23
 8002f2c:	4110      	asrs	r0, r2
 8002f2e:	2c00      	cmp	r4, #0
 8002f30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f34:	bfb8      	it	lt
 8002f36:	4240      	neglt	r0, r0
 8002f38:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8002f3c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8003038 <__ieee754_powf+0x558>
 8002f40:	ee17 3a10 	vmov	r3, s14
 8002f44:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002f48:	f023 030f 	bic.w	r3, r3, #15
 8002f4c:	ee07 3a10 	vmov	s14, r3
 8002f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f54:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8002f58:	eddf 7a38 	vldr	s15, [pc, #224]	; 800303c <__ieee754_powf+0x55c>
 8002f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f60:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8002f64:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003040 <__ieee754_powf+0x560>
 8002f68:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8002f70:	eeb0 6a40 	vmov.f32	s12, s0
 8002f74:	eea7 6a66 	vfms.f32	s12, s14, s13
 8002f78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002f7c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002f80:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003044 <__ieee754_powf+0x564>
 8002f84:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003048 <__ieee754_powf+0x568>
 8002f88:	eea7 6a26 	vfma.f32	s12, s14, s13
 8002f8c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800304c <__ieee754_powf+0x56c>
 8002f90:	eee6 6a07 	vfma.f32	s13, s12, s14
 8002f94:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8003050 <__ieee754_powf+0x570>
 8002f98:	eea6 6a87 	vfma.f32	s12, s13, s14
 8002f9c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003054 <__ieee754_powf+0x574>
 8002fa0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8002fa4:	eeb0 6a40 	vmov.f32	s12, s0
 8002fa8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8002fac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002fb0:	eeb0 7a46 	vmov.f32	s14, s12
 8002fb4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8002fb8:	ee20 6a06 	vmul.f32	s12, s0, s12
 8002fbc:	eee0 7a27 	vfma.f32	s15, s0, s15
 8002fc0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002fcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002fd0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002fd4:	ee10 3a10 	vmov	r3, s0
 8002fd8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8002fdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fe0:	da1a      	bge.n	8003018 <__ieee754_powf+0x538>
 8002fe2:	f000 f8b7 	bl	8003154 <scalbnf>
 8002fe6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002fea:	e5cd      	b.n	8002b88 <__ieee754_powf+0xa8>
 8002fec:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <__ieee754_powf+0x578>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	dd02      	ble.n	8002ff8 <__ieee754_powf+0x518>
 8002ff2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800305c <__ieee754_powf+0x57c>
 8002ff6:	e67b      	b.n	8002cf0 <__ieee754_powf+0x210>
 8002ff8:	d108      	bne.n	800300c <__ieee754_powf+0x52c>
 8002ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ffe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8003002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003006:	f6ff af7b 	blt.w	8002f00 <__ieee754_powf+0x420>
 800300a:	e7f2      	b.n	8002ff2 <__ieee754_powf+0x512>
 800300c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8003010:	f73f af76 	bgt.w	8002f00 <__ieee754_powf+0x420>
 8003014:	2000      	movs	r0, #0
 8003016:	e78f      	b.n	8002f38 <__ieee754_powf+0x458>
 8003018:	ee00 3a10 	vmov	s0, r3
 800301c:	e7e3      	b.n	8002fe6 <__ieee754_powf+0x506>
 800301e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003022:	e5b1      	b.n	8002b88 <__ieee754_powf+0xa8>
 8003024:	eeb0 0a68 	vmov.f32	s0, s17
 8003028:	e5ae      	b.n	8002b88 <__ieee754_powf+0xa8>
 800302a:	eeb0 0a48 	vmov.f32	s0, s16
 800302e:	e5ab      	b.n	8002b88 <__ieee754_powf+0xa8>
 8003030:	2600      	movs	r6, #0
 8003032:	e590      	b.n	8002b56 <__ieee754_powf+0x76>
 8003034:	007fffff 	.word	0x007fffff
 8003038:	3f317218 	.word	0x3f317218
 800303c:	35bfbe8c 	.word	0x35bfbe8c
 8003040:	3f317200 	.word	0x3f317200
 8003044:	3331bb4c 	.word	0x3331bb4c
 8003048:	b5ddea0e 	.word	0xb5ddea0e
 800304c:	388ab355 	.word	0x388ab355
 8003050:	bb360b61 	.word	0xbb360b61
 8003054:	3e2aaaab 	.word	0x3e2aaaab
 8003058:	43160000 	.word	0x43160000
 800305c:	0da24260 	.word	0x0da24260

08003060 <__ieee754_sqrtf>:
 8003060:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003064:	4770      	bx	lr

08003066 <fabsf>:
 8003066:	ee10 3a10 	vmov	r3, s0
 800306a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800306e:	ee00 3a10 	vmov	s0, r3
 8003072:	4770      	bx	lr

08003074 <finitef>:
 8003074:	b082      	sub	sp, #8
 8003076:	ed8d 0a01 	vstr	s0, [sp, #4]
 800307a:	9801      	ldr	r0, [sp, #4]
 800307c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003080:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8003084:	bfac      	ite	ge
 8003086:	2000      	movge	r0, #0
 8003088:	2001      	movlt	r0, #1
 800308a:	b002      	add	sp, #8
 800308c:	4770      	bx	lr
	...

08003090 <nanf>:
 8003090:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003098 <nanf+0x8>
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	7fc00000 	.word	0x7fc00000

0800309c <rintf>:
 800309c:	ee10 2a10 	vmov	r2, s0
 80030a0:	b513      	push	{r0, r1, r4, lr}
 80030a2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80030a6:	397f      	subs	r1, #127	; 0x7f
 80030a8:	2916      	cmp	r1, #22
 80030aa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80030ae:	dc47      	bgt.n	8003140 <rintf+0xa4>
 80030b0:	b32b      	cbz	r3, 80030fe <rintf+0x62>
 80030b2:	2900      	cmp	r1, #0
 80030b4:	ee10 3a10 	vmov	r3, s0
 80030b8:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80030bc:	da21      	bge.n	8003102 <rintf+0x66>
 80030be:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80030c2:	425b      	negs	r3, r3
 80030c4:	4921      	ldr	r1, [pc, #132]	; (800314c <rintf+0xb0>)
 80030c6:	0a5b      	lsrs	r3, r3, #9
 80030c8:	0d12      	lsrs	r2, r2, #20
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	0512      	lsls	r2, r2, #20
 80030d0:	4313      	orrs	r3, r2
 80030d2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	edd1 6a00 	vldr	s13, [r1]
 80030de:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80030e2:	ed8d 7a01 	vstr	s14, [sp, #4]
 80030e6:	eddd 7a01 	vldr	s15, [sp, #4]
 80030ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030ee:	ee17 3a90 	vmov	r3, s15
 80030f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030f6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80030fa:	ee00 3a10 	vmov	s0, r3
 80030fe:	b002      	add	sp, #8
 8003100:	bd10      	pop	{r4, pc}
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <rintf+0xb4>)
 8003104:	410a      	asrs	r2, r1
 8003106:	4213      	tst	r3, r2
 8003108:	d0f9      	beq.n	80030fe <rintf+0x62>
 800310a:	0854      	lsrs	r4, r2, #1
 800310c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8003110:	d006      	beq.n	8003120 <rintf+0x84>
 8003112:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003116:	ea23 0304 	bic.w	r3, r3, r4
 800311a:	fa42 f101 	asr.w	r1, r2, r1
 800311e:	430b      	orrs	r3, r1
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <rintf+0xb0>)
 8003122:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003126:	ed90 7a00 	vldr	s14, [r0]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003132:	edcd 7a01 	vstr	s15, [sp, #4]
 8003136:	ed9d 0a01 	vldr	s0, [sp, #4]
 800313a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800313e:	e7de      	b.n	80030fe <rintf+0x62>
 8003140:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003144:	d3db      	bcc.n	80030fe <rintf+0x62>
 8003146:	ee30 0a00 	vadd.f32	s0, s0, s0
 800314a:	e7d8      	b.n	80030fe <rintf+0x62>
 800314c:	08003284 	.word	0x08003284
 8003150:	007fffff 	.word	0x007fffff

08003154 <scalbnf>:
 8003154:	ee10 3a10 	vmov	r3, s0
 8003158:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800315c:	d025      	beq.n	80031aa <scalbnf+0x56>
 800315e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003162:	d302      	bcc.n	800316a <scalbnf+0x16>
 8003164:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003168:	4770      	bx	lr
 800316a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800316e:	d122      	bne.n	80031b6 <scalbnf+0x62>
 8003170:	4b2a      	ldr	r3, [pc, #168]	; (800321c <scalbnf+0xc8>)
 8003172:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003220 <scalbnf+0xcc>
 8003176:	4298      	cmp	r0, r3
 8003178:	ee20 0a27 	vmul.f32	s0, s0, s15
 800317c:	db16      	blt.n	80031ac <scalbnf+0x58>
 800317e:	ee10 3a10 	vmov	r3, s0
 8003182:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003186:	3a19      	subs	r2, #25
 8003188:	4402      	add	r2, r0
 800318a:	2afe      	cmp	r2, #254	; 0xfe
 800318c:	dd15      	ble.n	80031ba <scalbnf+0x66>
 800318e:	ee10 3a10 	vmov	r3, s0
 8003192:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003224 <scalbnf+0xd0>
 8003196:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003228 <scalbnf+0xd4>
 800319a:	2b00      	cmp	r3, #0
 800319c:	eeb0 7a67 	vmov.f32	s14, s15
 80031a0:	bfb8      	it	lt
 80031a2:	eef0 7a66 	vmovlt.f32	s15, s13
 80031a6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80031aa:	4770      	bx	lr
 80031ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800322c <scalbnf+0xd8>
 80031b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80031b4:	4770      	bx	lr
 80031b6:	0dd2      	lsrs	r2, r2, #23
 80031b8:	e7e6      	b.n	8003188 <scalbnf+0x34>
 80031ba:	2a00      	cmp	r2, #0
 80031bc:	dd06      	ble.n	80031cc <scalbnf+0x78>
 80031be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80031c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80031c6:	ee00 3a10 	vmov	s0, r3
 80031ca:	4770      	bx	lr
 80031cc:	f112 0f16 	cmn.w	r2, #22
 80031d0:	da1a      	bge.n	8003208 <scalbnf+0xb4>
 80031d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80031d6:	4298      	cmp	r0, r3
 80031d8:	ee10 3a10 	vmov	r3, s0
 80031dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e0:	dd0a      	ble.n	80031f8 <scalbnf+0xa4>
 80031e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003224 <scalbnf+0xd0>
 80031e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003228 <scalbnf+0xd4>
 80031ea:	eef0 7a40 	vmov.f32	s15, s0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf18      	it	ne
 80031f2:	eeb0 0a47 	vmovne.f32	s0, s14
 80031f6:	e7db      	b.n	80031b0 <scalbnf+0x5c>
 80031f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800322c <scalbnf+0xd8>
 80031fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003230 <scalbnf+0xdc>
 8003200:	eef0 7a40 	vmov.f32	s15, s0
 8003204:	2b00      	cmp	r3, #0
 8003206:	e7f3      	b.n	80031f0 <scalbnf+0x9c>
 8003208:	3219      	adds	r2, #25
 800320a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800320e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003212:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003234 <scalbnf+0xe0>
 8003216:	ee07 3a10 	vmov	s14, r3
 800321a:	e7c4      	b.n	80031a6 <scalbnf+0x52>
 800321c:	ffff3cb0 	.word	0xffff3cb0
 8003220:	4c000000 	.word	0x4c000000
 8003224:	7149f2ca 	.word	0x7149f2ca
 8003228:	f149f2ca 	.word	0xf149f2ca
 800322c:	0da24260 	.word	0x0da24260
 8003230:	8da24260 	.word	0x8da24260
 8003234:	33000000 	.word	0x33000000

08003238 <_init>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr

08003244 <_fini>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr
